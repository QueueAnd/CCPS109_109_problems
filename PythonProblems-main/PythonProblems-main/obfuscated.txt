# THESE SOLUTIONS ARE NOT IN PUBLIC DOMAIN, NOR RELEASED UNDER ANY
# FREE SOFTWARE LICENSE SUCH AS GPL, MIT OR CREATIVE COMMONS.

# This file may not be distributed without the express written
# permission by Ilkka Kokkarinen, as this file is private
# intellectual property of Ilkka Kokkarinen. A small number of
# individual functions may be distributed during lab sessions
# of Python programming courses built on the material, but only
# among the official student body of that course.

from fractions import Fraction
from collections import deque
from bisect import bisect_left
from functools import lru_cache
from itertools import combinations, chain, islice, count, product, zip_longest
from datetime import timedelta
from queue import Queue
from decimal import Decimal, getcontext
from heapq import heappush, heappop


# Both lists __fibs and __primes will grow as some functions
# below are executed and need bigger Fibonacci numbers and prime
# numbers to be able to handle their larger argument values.

__fibs = [1, 2, 3, 5, 8, 13, 21, 34, 55]

__primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]

# The following lists of things will remain fixed throughout the execution.

__faces = {14: 'A', 13: 'K', 12: 'Q', 11: 'J'}

__suits = ['spades', 'hearts', 'diamonds', 'clubs']

__losers = {
    ██████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████
}

__bridge_ranks = {
    ████████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
}

__gin_ranks = {
    ███████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
}

__morse = {
    ████████████████████████████████████████████████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████
}

__morse_r = {__morse[k]: k for k in __morse}

__lowest_unseen = 0
__diffs_taken = set()
__mian_chowla = [1]

__prev_recaman = 0
__lowest_unseen_rec = 1
__recaman_seen = set()

__knight_moves = [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]
__king_moves = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]

__zero = Fraction(0)
__one = Fraction(1)
__one_eighth = Fraction(1, 8)
__one_half = Fraction(1, 2)

__hof_r = [1]
__hof_s = [2]
__hof_missing = 4
__hof_idx = 0

__kim_left = []
__kim_right = 1

__rr_seq = '0'
__rr_max = 0

__gijswijt = [1, 1, 2, 1, 1, 2, 2, 2, 3, 1, 1, 2, 1, 1, 2, 2, 2, 3, 2, 1]

__factorials = [1]

__ordinals = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth']
__removals = ['none', 'once', 'twice', 'thrice', 'four times', 'five times', 'six times', 'seven times',
              █████████████████████████████████████████

# Fill in the factorials list as needed.

def __fact(n):
    ████████████████████████████████
        █████████████████████████████████████████████████████████
    ██████████████████████


def sign(n):
    █████████
        █████████
    ███████████
        █████████
    █████
        ████████


# The actual solution functions. These are not in any particular order.

# Superior solution by Claude Opus 4
def front_back_sort(perm):
    ███
    ██████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████

    ███████████████████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████

    █████████████████████████████████████████████████████████████
    ███
    █████████████

    # dp[i] = length of longest contiguous sequence ending with value i
    ████████████

    # pos[i] gives the position where value i appears
    █████████████
    ██████████████████
        ████████████████

    ██████████████

    # For each value from 1 to n-1
    ███████████████████████
        # If val appears after val-1, we can extend the sequence
        ███████████████████████████
            █████████████████████████
            █████████████████████████████████████

    # The answer is n minus the longest subsequence we can keep
    █████████████████████


def pick_it(items):
    ██████████████
    # Initialize the dancing links node list for items that have been taken
    ████████████████████████████████
    ████████████████████████████████
    ███████████████
    ███████████████
    █████████████████████████████████

    ████████████████████
        █████████████
        ████████████████████
            ████████████████████████
        █████
            ███████████
            ████████████████
                # Try taking out item in position i
                ███████████████████████
                ███████████████████████
                ██████████████████████████████████████████████████████████████████
                # Downdate to restore that item
                █████████████████
                █████████████████
                ███████████

    ██████████
    ███████████


def find_all_words(letters, words):
    ████████████████
    # Initialize the dancing links node list for letters that have been taken
    ██████████████████████████████████
    ██████████████████████████████████
    ███████████
    ███████████
    ███████████

    ██████████████████
        ████████████████████████████
        ██████████████████████████████████████████

    ██████████████████████
        ████████████████████████████
        ███████████████████████████████████████████████████

    ████████████████████████
        ███████████████████████
           █████████████████████████
        █████████████████████████████████
            ██████
        ██████████
        ███████████
        ████████████
            ██████████████████████
                ███████████████████████
                ███████████████████████
                █████████████████
                ██████████████████████████
                █████████████████
                █████████████████
            ███████████

    ███████████
    █████████████


def optimal_ab_filling(text, ab, ba):
    █████████████
    ████████████████████

    ██████████████████████
    █████████████████████
        ██████
        ██████████
            ████████
        ████████████████████# Try 'a' in the current position
            ████████████████████████████████████████████████████
        ████████████████████# Try 'b' in the current position
            ████████████████████████████████████████████████████████████
        ████████

    ██████████████████████


def haircut(speed, n):
    ██████████████
    █████████████████████████████████
    ██████████████████
        █████
        █████████████████████
            ███████████████████████████████
                █████
        ███████████████████████
        ████████████████
            ██████████████████
                ████████████████████████
        ███████████████████████
    ████████


def limited_swaps(perm, swaps):
    ███████████████████████
    ████████████████████
        ███████████

    ██████████████

    ████████████████
        █████████████████████████████████████████████

    █████████████████████████████████████████████
    █████████████████████
        ██████████████████
        ████████████████████
            ██████████████
            ███████████████████████████
            █████████████
            ███████████████████
                ██████████████████
                    █████████
                █████████████
                    ████████████
                ███████████████████████████████████
                █████████████
    ███████████


def bayes_dice_update(dice, rolls):
    █████████████
    ██████████████████████████████████████
    ███████████████
        ██████████████████████████████
            ██████████
                ████████████████████████████████████
            █████
                ████████████
    ██████████████
    █████████████████████████████


def s_eval(expr):
    █████████████████████████████████████████
    ██████████████████████████
        ████████████████████████████████████████████
            █████████████████
            ███████
            ██████████████████████
        █████████████████████
            █████████████████████
            ███████████████████████
        ████████████████
            ███████████████
        ██████████████
            ███████████████
            ███████████████
            ████████████████
            █████████████
                ███████████████████
            ███████████████
                ███████████████████
            ███████████████
                ███████████████████
            █████
                ██████████████████████████████████████
        █████
            ██████# Skip all other characters
    ███████████████


def odds_and_evens(first, second):
    ██████████████████████████████

    ███████████████████████████████████
    █████████████████████████████
        █████████████████████
            █████████████████████
        ██████████████████
        █████████
            ███████████████████
                ██████████████████████████████████████████████████
            █████
                ██████████████████████████████████████████████████
        █████████
            ████████████████████
                ██████████████████████████████████████████████████
            █████
                ██████████████████████████████████████████████████
        ███████████

    ███████████████████████████


def cousin_explainer(a, b):
    █████████████
    # Climb up on step from larger number until both numbers are equal
    █████████████
        █████████
            ██████████████████████
        █████
            ██████████████████████
    █████████████# Parental line
        █████████████████████████████████████████████████████████████████████
    ███████████████# Descendant line
        █████████████████████████████████████████████████████████████████████████
    ███████████████# Sisterly line
        ███████████
            ███████████████
        █████
            ███████████████████████████████████████████████████████████████████
    ███████████████# Aunty line
        ███████████
            █████████████
        █████████████
            ███████████████████
        █████
            ██████████████████████████████████████████
    ███████# Cousinly line
        ███████████████████████████████████████████
        █████████████████████████████████████████
        ████████████████████████████████████████████████████████████████████████████████████████████████████


def lehmer_encode(perm):
    █████████████████████████
    ██████████████████████
        ███████
        █████████████████████████
            █████████████████████
                ████████
        ██████████████████
    █████████████


def lehmer_decode(inv):
    ████████████████
    ████████████████████████████
    █████████████████████████████████
    ███████████████████████████
        █████
        █████████████
            ████████████████
                ██████
            ██████████
                ██████
        ███████████████
        ███████████
    █████████████████████
    █████████████████████████████
        █████████
            ███████████████
            ███████████
    ██████████████# Unreachable


def loopless_walk(steps):
    █████████████████████████
    ███████████████
        ███████████████████████
            ████████████████
            ███████████
        █████
            ██████████████████████
                ███████████████████████
    ██████████████████████


def square_root_sum(n1, n2):
    ██████████████
    ███████████
        █████████████████████████████
        ███████████████████████████████████████████
        ███████████████████████████████████████████
        █████████████████
        █████████████████
        ██████████████████████████
            ██████████
        ██████████████████████████
            ██████████
        █████
        ████████████████████████████████████████
            ██████
        ████████████████████
            ██████████████████████
        ███████████████


def friendship_paradox(friends):
    ████████████████
    ███████████████████████████████████████████████████████
    ████████████
    ██████████████████
        ██████████████████████████████████████████
        ██████████████████████████████████████
    ██████████████████████████████
    # Check that the second average is not smaller than the first one before returning both.
    ████████████████████████████
    ██████████████████████████


def factoradic_base(n):
    ██████████████████████████████████
    # Find the largest factorial that is at most equal to n.
    ████████████
        ██████
        █████████
    █████████
        ██████████
        ██████
    # Compute the coefficients from the highest factorial down.
    ██████████████████
        █████████████████████
        █████████
        ██████████
        ██████
    █████████████████████
    # Just to be safe, verify that decoding the result produces the original n.
    ███████████████
    ██████████████████████████████
        ███████████████
        ██████████████
    ██████████████████████
    █████████████


def tchuka_ruma(board):
    ██████████████████████████████████████

    ██████████████████████████
        ███████████
            ██████████████
            ████████████████████
            ██████████████
            ██████████████████████████
            ██████████████████
                ███████████████████
                ███████████████
                ████████████
            ████████████
                ████████████# Successful move
            ███████████████████
                ████████████# Game ends with this move


    ███████████████████████████████
        ██████████████████████████
            ██████████████████████████
            ████████████████████████
                ███████████████
                ███████████████████
            █████████████████████


    ███████████
        █████████████
        █████████████
            ██████
        ███████████████
        ███████████████████████
            ██████████████████
                ███████████████████████████████
                ██████████████████████████
                ████████████████
                    ██████
                ██████████████████████████████

    ██████
    ███████████


def gauss_circle(r):
    ████████████████████████████████
    █████████████
        ██████████████████
        █████████
            ██████████████████
        ██████
        ██████████████████████
            ██████
        ██████
    ████████████


def maximal_palindrome(digits):
    ████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████
    ███████████████████
        ████████████████████████████████
    ███████████████████████████████████████████████████████████████████████
    ███████████████████████████████████


def ants_on_the_rod(ants, w):
    █████████████
    ███████████████████████
    ███████████████████████████████
    ███████████████
        █████████
        ███████████████████████████
            █████████████
                ████████
            ████████████████████████████████
               ███████████████████████████
               ███████████████
               ███████
            ██████████████████████████████████
               ███████████████████████████████
               ██████████████████
               ███████
            ██████████████████████
                ███████████████
                ████████████████████████████████
                    ███████████████████
                    ███████████████
            █████
                █████████████████████████████████████████████████████████████
                    ███████████████
                    ███████████████████
                    ████████████
                    ████████████████████████████████
                        ███████████████████
                        ███████████████
                █████
                    ███████████████
        ██████

    # Just to be safe, verify that the result list has "organ pipe" shape
    ██████████████████████████
    █████████████████
        █████████████
        ███████████████
        █████████████████████████████████
        ████████████
            ████████████████
    # Okay to return
    ██████████████


def multiply_and_sort(n, mul):
    ████████████████████
    ████████████████████
        ███████████
        █████████████████████████████████████████████████
        █████████████████
    ██████████


def split_at_none(items):
    ████████████████████████
    ██████████████████████████████
        █████████████
            ██████████████████████
            ████████████
        █████
            █████████████████
    █████████████


def magic_knight(n, items):
    ████████████████████████████████████████████████████
    ███████████
    ███████████████████████████████
    ███████████
        ███████████████
        █████████████████
            █████████████████████
            ██████
            ███████████████████
                █████████████
        ██████
        █████████████████████████████
        ███████████████████████████████████
        ███████████████████████████
            ███████████████████████████████████
        ███████████████████████████
            ███████████████████████████████████
            ████████████


def power_prefix(prefix):
    ███████████
    ███████████
        ███████████
        █████████████████████████████████████████████████████████████████████████████████████████
            ████████
        ███████████████████


import sys


# Increase recursion depth for potentially deep group finding (though unlikely needed for 1D)
# sys.setrecursionlimit(2000) # Usually not necessary for this problem

def pinch_moves(board, player):
    ███
    ██████████████████████████████████████████████████████████████████████████████

    █████
        ██████████████████████████████████████████████████████████
        ██████████████████████████████████████████████

    ████████
        ███████████████████████████████████████████████████████████████████████
                   ███████████████████████████████████████████████████████
                   ███████████████████████████████████████████████
    ███
    ██████████████
    ████████████████████████████████████████
    ██████████████████████████████# Use a set to automatically handle duplicates

    # --- Helper function to resolve captures ---
    █████████████████████████████████████████████████████████
        ███
        ███████████████████████████████████████████████████████

        █████
            ████████████████████████████████████████████████████████████████████████
            █████████████████████████████████████████████████████████████████

        ████████
            ███████████████████████████████████████████
                █████████████████████████████████████████████████████████████████████████
                █████████████████████████████████████████████████
        ███
        ████████████████████████████████████████████████# Work on a copy
        ██████████████████████████
        ████████████████████████████████████████████████████
        █████████████████████████████████
        █████
        █████████████████
            ██████████████████████████████████████████
                # Found start of a potential opponent group
                ███████████████
                █████
                ████████████████████████████████████████████████████████████
                    ██████
                ███████████████████# Inclusive index of the last piece in the group

                # Check if the group is surrounded
                █████████████████████████████████████████
                                  ████████████████████████████████████████████████████████
                █████████████████████████████████████████████████
                                   █████████████████████████████████████████████████████████████████████████████████

                ████████████████████████████████████████
                    █████████████████████████
                    # Mark the captured group with 'R'
                    ███████████████████████████████████████████
                        ████████████████████████████
                    ███████████████████# Continue search after the captured group
                █████
                    ███████████████████# Continue search after the non-captured group
            █████
                ██████
        ██████████████████████████████████████████████

    # --- Helper function to check if a specific group is captured ---
    █████████████████████████████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████████████████
        ██████████████████████████████
        ███████████████████████████████████████████████████████

        █████████████████████████████████████████
                          █████████████████████████████████████████████████████████████████████████████
        █████████████████████████████████████████████████
                           ██████████████████████████████████████████████████████████████████████████████████

        ███████████████████████████████████████████

    # --- Helper function to find the group containing a given index ---
    ████████████████████████████████████████
        █████████████████████████████████████████████████████████████████████████████
        ███████████████████████████████
        ████████████████████████████████
            ███████████████# Not part of a solid group

        █████████████
        █████████████████████████████████████████████████████████
            ██████████

        ███████████
        ██████████████████████████████
        ██████████████████████████████████████████████████████████████
            ████████

        █████████████████

    # --- Iterate through all possible move positions ---
    ██████████████████
        █████████████████████████████

        # Rule: Can only play on '.' or 'R'
        ██████████████████████████████████████████████████████████
            # 1. Simulate placing the stone
            ████████████████████████████████████████
            ██████████████████████████████████████

            # 2. Resolve captures of the opponent caused by this move
            ████████████████████████████████████████████████████████████████████████
                ██████████████████████████████████
            █

            # 3. Check the special 'R' point rule:
            #    Playing on 'R' is illegal *if* it captures an opponent group.
            ███████████████████████████████████████████████████
                ██████████# This move is illegal, skip to next potential position

            # 4. Check for suicide:
            #    A move is suicide if it results in the newly placed stone's group
            #    being captured, AND no opponent stones were captured by the move.
            ██████████████████
            █████████████████████████
                # Find the group the newly placed stone belongs to *after* opponent captures
                # (which didn't happen in this case, but use the intermediate board state)
                █████████████████████████████████████████████████████████████████████████

                # If find_group returned valid indices (i.e., the spot wasn't immediately marked 'R' - shouldn't happen here)
                # Check if this group is now surrounded by the opponent
                █████████████████████
                    ████████████████████████████████████████████████████████████████████████████████████████
                        █████████████████

            # 5. If the move is not suicide, it's a legal move.
            ██████████████████
                # The final board state for the *next* turn should have '.' instead of 'R'
                ██████████████████████████████████████████████████████████
                ██████████████████
                    ██████████████████████████████
                        █████████████████████████

                ███████████████████████████████████████████████████

    ███████████████████████████████████████████# Return sorted list for consistent output


def tom_and_jerry(n, edges):

    ████████████████████████████
    ██████████████████████████████
        ██████████████████# Tom wins
            ████████████
        █████████████████# Jerry wins
            ███████████
        ███████████████████████# Otherwise examine all possible moves
            ████████████████████████████████████████████████████████████
                ████████████
            ██████████████████████████████████████████████████████████
                ███████████
        ██████████████████

    ███████████████████████


def cubes_on_trailer(xy, xz, yz):
    █████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████
    ██████████████████████████████
    ██████████████████████████████
    ████████████████

    ███████████████████████████████████
        # Check that previous row fulfills its height requirements
        █████████████████████████████████████████████████████
            ██████
        # If entire grid completed, check if xz constraints are properly filled
        ███████████
            ██████████████████
                ██████████████████████████
                    ███████████████████████
            ██████
        # Try not putting a box at (x, y, z) if possible
        █████████████████████████
            █████████████████████████████████████████████████
            ████████████████████████████████
        # If both x and y expected heights already reached, add this to slack
        █████████████████████████████████████████████████████████████████████████
            █████████████████████████████████████████████████
            ███████████████████████████
            ████████████████████████████████████████████
        # Otherwise try putting a box at (x, y, z) if possible
        ███████████████████████████████████████████████████
            █████████████████████████████████
            ███████████████████████████████
            ███████████████████████████████
            ██████████████████████████████████████
            █████████████████████████████████

    ██████████████████████
    ███████████████████████████████████


def powertrain(n):
    █████████
    ████████████
        ██████████
        ████████████████████████████████████
        ██████████████████████████████████████████████████████
            █████████████████████
        ██████████
    ████████████


def complex_base_decode(bits):
    █████████████████████████████
    ████████████████████████
        ████████████
            ██████████████████████████████████████████████████
        # Multiply power by (I - 1)
        ███████████████████████████████████████████████████
    ████████████


def set_splitting(n, subsets):
    ██████████████████████████████████████████████
    ██████████████████████████████████
    ████████████████████████████████████
        ████████████████
            ██████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████

    █████████████████████████████████████
        ██████████████
        █████████████████████████
            ███████████
        ██████████
        █████████████████████
            ██████████████████████████████████████████████
                ███████
        ██████████████████████
            ████████████████████████████████████████████████████████████████
                █████████
                ██████████████████████
                    ████████████████
                    ████████████████████
                        █████████████████████
                        ██████████████
                ██████████████
                ████████████████████████████████████
                    ███████████
                ██████████
                ██████████████████████
                    ████████████████
                ██████████████
                    ██████████████████
                ███████████
                ███████████████████
        ███████████████████
            ██████████████
        ████████████████████
        ████████████

    ███████████████████████████████████████████████████


def bandwidth(edges):
    ██████████████

    ██████████████████████████████████████████████
        ██████████████████
            █████████████████████
                ████████████████████████████
                    █████████████████████
                        ██████████████████████
                        ████████████████████
                █████████████████████████
                    ████████████
        ███████████

    █████████████████████████████████████████████
        ████████████████████
            ███████████
        ███████████████████████████████████████████████████████████████
        ████████████████
        █████████
        █████████████████████████████
            ██████████████████
                █████████████████████████████████████████████
                    ███████████████
                    █████████████████
                    ████████████████████████████████████████████
                        ███████████
                ████████████████████
                    ████████████████████
                    ███████████████████
                ████████████████
                ██████████████████
        ████████████████
        ████████████

    ██████████████████████
        ████████████████████████
        ██████████████████████████████████████████████
        █████████████████████████████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████████████████████████████████
            ████████
    ████████████


def manimix(expression):
    ██████████
    ████████████████████
        █████████████
            ████████████████████████████
            ███████████████
            ████████████████████
                ████████████████████████████████████████
                ███████████████
            ███████████████
        █████
            ███████████████
    ███████████████


def accumulating_merge(items1, items2):
    ███████████████████████████████
    ██████████████████████████████████████████████████████████████████████
    ██████████████████████████
        █████████████████████████████████████████████████████████████████████████████████████
            ███████
        ████████████████████
        ████████████████
        █████████████
        ███████████
    █████████████


def string_stretching(text):
    ████████████████████████████████████████

    ███████████████████████████████████████
        ██████████████
        ██████████
            █████████████████████████████████████████
                █████████████████████
            ██████
        ███████████████
            ██████

        # Try starting a new word from the current position.
        ████████████████████
            ███████████████████
            ████████████████████████████████████████████████████████████████████████████
            ███████████

        # Extract the current word from the stack.
        ████████████████████████████████████████████
        █████████████████████████

        # Try extending the current word, extending also the pattern if necessary.
        ███████████████████████████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████████
        █████████████████████████████████████████
            █████████████████████
                ██████████████████████
            ████████████████████████████
                ██████████████████████████████████████████████
            █████████████████████
                ███████████

        # Restore the current word to the stack and return None.
        ██████████████
            ██████████████████
        ███████████

    # Iterative deepening search for pattern lengths.
    ████████████████████████████
        ██████████████
            ████████████████████████
            ██████████████████
                ███████████████████████
    ███████████


def conway_coin_race(a, b):
    ███████████████
        █████████████████████████████████████████████████████████████████████████████████████████████

    ████████████████████████████████
    ████████████████████████████████
    ████████████████████████████████████████


def baker_norine_dollar_game(edges, balance):
    ████████████████████████
    ████████████████████████████████████████████████
    ████████████████████████
        █████████████████████
        ██████████████
        █████████████████
        ██████████████████
            ████████████████████████████
                ████████████████████████
                ██████████████████
                    ████████████
                ████████████████████████████
                    ███████████
                ████████████████████
                ██████████████████████
                    ███████████████████████
                    ████████████████
                ████████████████████████
                ██████████████████
                    ████████████
    ████████████


def vertex_cover(edges):
    ██████████████
    ████████
    ██████████████████████
    █████████████████████████████████████████████

    ██████████████████████
        █████████████
        ██████████████████████
            ██████
        ██████████████████████████████████
            ██████
        ██████████
            ████████████████████████████
            ██████
        ████████████
        # Try taking in node u, provided that it has any neighbour not already taken in.
        █████████████████████████████████████████
            ████████████
            █████████████████████
            ███████████████
        # Try taking in all neighbours of u, but not take in u itself.
        ██████████████
        ██████████████████
            ██████████████████
                ████████████
                ███████████████████
        █████████████████████
        ███████████████████
            ███████████████

    # Start by taking neighbour of each singleton vertex into the set.
    █████████████
    ██████████████████
        █████████████████████████████████████████
            ███████████████
            ████████████
    # Do the recursive backtrack to select the rest.
    █████████████████
    ███████████


def recaman(n):
    ██████████████████████████████████████████
    ██████████████████████
        ███████████████████████
        ████████████████████████████████████████████████████
            ███████████████████████
    █████
        ███████████████████████
    ███████████████████
    █████████████████████████████
        ██████████████████████
        ████████████████████████████████████████████
            ██████████████████████████████████████████
            ████████████████████████
    █████████


def is_caterpillar(edges):
    ██████████████

    # First verify that the entire graph is connected.
    ████████████████████████████
    ████████████████████████
        ██████████████████
        ████████████
        ██████████████████
            ██████████████████
                ██████████████████
    # If not connected, then also not a caterpillar.
    ███████████████████
        ████████████

    # Next, remove leaves.
    ██████████████████████
    █████████████████████████████████████████████████████
        ████████████████
        ███████████████
        ██████████████████

    # Check if whatever remains after removing leaves is a path graph.
    ███████████████████
        █████████████# Trivially a path graph.
    █████████████
    ████████████████
        █████████████████████
            ████████████
        ██████████████████████
            ██████████████
    █████████████████████


def sneaking(n, start, goal, knights):
    ██████████████████████

    ████████████████████████████
        ███████████████████████████████
            ███████████████████████
            ███████████████████████████████
                ███████████████████

    ██████████████████████████████████████████████████
    ██████████████████████
        ████████████████████████

    ███████████████████████████████████████
        ████████████
        ███████████████████
        # See if we can sneak to goal past all the sleeping knights.
        ████████████████████████
            ███████████████████████
            ██████████████████
            █████████████████████████████
                █████████████████████████
                ███████████████████████████████████████████████████████████████████████████████
                    █████████████████████
                        ███████████
                    █████████████████████████
        # If not, see if we can first capture some knight and solve the problem that way.
        ██████████████
            ███████████████████████████
            █████████████████████████████████████████████████████████████████████████████████████████████
            ████████████████████████████
                ███████████████████████████████████████████
                    ████████████████████████
                    ██████████████████████████
                    █████████████████████████████████
                        ███████████
                    ██████████████████████████
                    █████████████████████
        ████████████

    █████████████████████████████████


def first_fit_bin_packing(items, capacity):
    █████████
    ███████████████
        ██████████████████████████████
            █████████████████████
                ████████████
                █████
        █████
            ██████████████
    ███████████


def word_bin_packing(words):
    ██████████████
    ████████████

    ███████████████████████████████████
    ███████████████████████████████████████
        █████████████████████████████████████████████
            █████████████
            █████████████

    ██████████████████████████████████████

    █████████████████████
        █████████████
        █████████████████████
            ██████
        ██████████
            ███████████████████████████
            ██████
        ███████████████
        # Try out all the ways to place word in one of the compatible existing bins.
        █████████████████
            █████████████████████████████████████████████████████████████████████████████
                █████████████████
                ████████████████████
                █████████████████
        # Try starting a new bin with the current word.
        ███████████████████
        ████████████████████
        ██████████

    ██████████████
    ███████████


def independent_dominating_set(edges):
    ██████████████
    ████████
    ██████████████████████
    █████████████████████████████████████████████

    ███████████████████████████████
        █████████████
        ██████████████████████
            ██████
        ████████████████████████████████████
            ██████
        ██████████
            ███████████████████████████████████████████
                █████████████████
            ██████
        █████████████████████████████
        ███████████████
        ██████████████
        ██████████████████
            ████████████████████
                ██████████████
                █████████████████████
        ██████████████████████████████
        █████████████████████
            █████████████████
        █████████████████
        ███████████
        ██████████████████████████████

    █████████████████████
    ███████████


def spiral_matrix(n, row, col):
    █████████
    ███████████
        ██████████████# Top row
            ██████████████████
        ██████████████████# Right column
            ██████████████████████████
        ██████████████████# Bottom row
            ████████████████████████████████
        ██████████████# Left column
            ████████████████████████████████
        ████████████████████
        █████████████████████████████████████


def word_positions(sentence, word):
    █████████████████████████████████████████████████████████████████


def unity_partition(n):

    ██████████████████████████████
        ███████████
            ██████████████████████████████████████████
        ███████████████████
            ███████████
        ████████████████████████████████████████████████
        ██████████████
            ████████████████
            ██████████████████████████████████████████████████████
                █████████████
            ████████████
            ██████████████████████████████████████████
        ███████████

    █████████████████████████████
    ███████████████████████████████████████████████████
    █████████████


def jai_alai(n, results):
    ███████████████████████████████████████████████████████
    █████████████████████
        ████████████
    ██████████████████████
        ████████████████████████
        █████████████████
            ███████████████████████████████████
        █████████████████
        ███████████████████████# Back to the end of the line you go
    █████████████


def tic_tac(board, player, probs):
    ████████████████████████████████████
    █████████████
    ██████████████████████
                 █████████
                 █████████
                 ████████████████████████████████████████
                 ████████████████████████████████████████
                 ████████████████████████████████████████
                 ████████████████████████████████████████
                 ████████████████████████████████████████
                 ██
        ████████████████████████████████████
            ████████████
        ██████████████████████████████
            █████████████
    ██████████████████
        █████████████
    █████████████
    ████████████████████
        ████████████████████
            ██████████████████████████
                ████████████████████████
                ██████████████████████████████████████████████████████████
                ██████████████████████
                ████████████████████████████████████████████████████████████████
                █████████████████████
                █████████████████████████████
    ███████████


def lowest_fraction_between(first, second):
    █████████████████████████████████████████████████████████████████████████████████████
    █████
    ███████████
        █████████████████
        █████████████████
        ███████████
            ██████████████████████████
        ██████


def lamp_pairs(lamps):
    █████████████████████████████████
    ███████████████████████████████
    ████████████
        ████████████████
            ██████████████████████████████████
                ██████
                ███████████
            █████
                █████████
                █████████████████████████████████████████████
                    ██████
                ██████████████
                    ███████████
                █████████████████████
                ███████████████████████████████
                ██████
        █████
            ██████
    █████████████


def count_friday_13s(start, end):
    ███████████████████████████████████████████████████████████
    ██████████████████████████████
        ████████████
    ███████████████████
        ███████████████████
            ███████████
        █████████████
    █████████████


def __twos_and_threes(n):
    ██████████
        █████████
    ████████████
        ███████████████
    ████████████████
        █████████████████████████████████████████████████████████
    █████
        ███████████
        █████████████
            ███████████████████
        ██████████████████
        ██████████████████████████████████████████████████████████████████████████


def twos_and_threes(n):
    ██████████████████████████████████████████████████████████████████████████████████


def infected_cells(infected):
    █████████████████████████████████████████
    █████████████████████████████████████████
    █████████████████████
        ████████████████████
        █████████████████████
            ███████████████████████
            ████████████████████████████
                ██████████████
                ███████████████████████
                    ████████████████████████████████████
                        ███████████████
                ██████████████████
                    ██████████████████████
                    ██████████████████████
    ████████████████████


def knight_jam(knights, player):
    ███████████████████
        ███████████
        █████████████████
            ███████████████████████████████████████████████████████
            ███████████████████████████████████████████████████████
                █████████████████████████
        █████████████

    ███████████
    ██████████████████████
        ███████████████████████████████████
        ████████████████
            ██████████████████████████████████████████
            ███████████████████████████████████
    █████████████

    ████████████████████████
        ████████████████████████████████████
            ██████████████████████
            █████████████████████
            ██████████████████████████████████████████████████
            ████████████████████████
            ███████████████████
            ████████████████
                ███████████
    ████████████


@lru_cache(maxsize=60000)
def __can_reach(n, k):
    # Too far from the origin to be reachable.
    █████████████████████
        ████████████
    # No more skips left, must be at the origin.
    ██████████
        █████████████
    # Two possibilities for previous value from which we come to n.
    ███████████████████████████████████████████████████████████████████████████████████████████████████


def arithmetic_skip(n):
    █████
    ███████████
        ██████████████████████████
            ████████
        ██████


def trip_flip(switches):
    █████████████████

    ██████████████
        ████████
        ████████████████████████████████████
            ████████████████████████████████████████████████████████████████████████████████████████████████████████████
                ██████████████████████████
                █████████████████████████████████████████████████████████████████
                ████████████████████████████
                ███████████████████████████████████████████████████████████████████████████████
        ███████████

    █████████████


def square_lamps(n, flips):
    ██████████████████████████████
    ██████████████████████████████
    ██████████████████
        ████████████
            █████████████████████████████
        █████
            ███████████████████████████
    ██████████████████
    ██████████████████
    ████████████████████████████████████████████████████


def lychrel(n, giveup):
    █████████
    ██████████
    ████████████
    █████████████████████████████
        ██████████
        ███████████
        █████████████████████████
        ████████████
    ████████████████████████████████████


def nfa(rules, text):
    █████████████
    ██████████████
        ██████████████████
        ██████████████████
            █████████████████████████████
                ████████████████████
        ██████████████████
    ████████████████████


def dfa(rules, text):
    █████████
    ██████████████
        █████████████████████████
    ████████████


def condorcet_election(ballots):
    ███████████████████
    █████████████████████████████████████████████████
    ██████████████████████
        ████████████████████████████████
            ███████████████████████
                ████████████████████████
    ███████████████████████████████████
    █████████████████████
        █████████████████████████
            ██████████████████████████████████
                ████████████████████
            █████
                ████████████████████
    ███████████████████████████████████████
    ██████████
    █████████████████████
        ████████████████████████████████████████
            ██████████
    █████████████


def repeating_decimal(a, b):
    █████████████████████████
    ███████████
        ██████████
            █████████████████████████████████████████████████
        ██████████████████████
            ██████████████████████████
            █████████████████████████████████████████████████████████████████████████
        █████████████████████
        ██████████████████████████
        ████████████████


def shapley_shubik(weight, quota):
    ███████████████
    ████████████████████████████████████████████████████
    █████████████████████████████████████████████████████
    █████████████████████████████

    █████████████████████████
        ███████████████
            ████████████████████████
        █████
            ████████████
            █████████████
                ██████████████████████████# Joe, meet Moe
                ██████████████████████████# Moe, meet Joe
                █████████████████████████████████
                █████████████████████████████████████# Sorry for butting back in
                ████████████

    █████████████████
    ████████████


def pair_swaps(perm):
    ███████████████████████
    ██████████████████
        ███████████
        █████████████
            ███████████████████████████████████
            ███████████
            ██████████
    ████████████


def pair_sums(n, sums):
    ███████████████████████████████
    ██████████████
        ████████████████████████████████

    ████████████████████
        ████████████████████████
        ███████████████████████
            █████████████████████
            ████████████████████████
                ████████████████████
                ██████████████
            █████
                ████████
                ████████████
        ███████████

    █████████████
        ███████████████████████████████████████
            ██████████████

    █████████████████
        ██████████
            ███████████
        ███████████████████████████████████
            █████████████
            █████████████████████
                ██████████████████
                    ███████████
                █████
                    ████████
        ████████████

    ████████████████████████████
    ███████████████████████████████████████████
        ████████████████
        ███████████████████████████
        ████████████████████████
        ███████████████████████████
        ██████████████████████████
            ████████
            ████████
        █████████████████████
            ██████████████████
                ███████████
            ████████
        ████████
    ████████████


def count_triangles(sides):
    ████████████████████████
    █████████████████████
        ███████
        ████████████████████████████████████████████████
            ███████
            ████████████████████████████████████████████████
                ██████████
                ██████
            ██████
    ████████████


def place_disks(points, r):
    ██████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████
        ████████████████████████████████████
            ██████████████████████████████████
            ██████████████████████████████████
    ██████████████████████████████████████████████

    ██████████████████████████
        █████████████
        █████████
            █████████████
            # Try placing a disk on point p
            ███████████████
                ███████████████
                █████████████████████████
                    ████████████████████
                        █████████████████████████
                        █████████████████████
                ███████████████████████████
                █████████████████████████
                    ██████████████████
            # Try not placing a disk on point p
            ███████████████████████
        █████
            ███████████████████████

    ██████████████████████
    ███████████


def longest_zigzag(items):
    ██████████████
    ██████████████████████████████████████████████████
    ██████████████████████████████
        ████████████████████
            ███████████████████████████
                ████████████████████████████████████████████████████████████████████
                    █████████████████████████████████████████████████████████████
    ████████████████████████████████████


def median_filter(items, k):
    ███████████████████████████
    ███████████████████████████████████████
    ███████████████
        ████████████████
        █████████████████████████████████████
        ███████████████████
    █████████████


def domino_pop(dominos):
    ████████████████
    ████████

    ██████████████████
        █████████████████████████████████████████████████

    ████████████████████
        █████████████
        ██████████████████████████████████
            ██████
        ██████████████
            ████████████████████████████
        █████
            ████████████████
            # Try popping if possible
            ██████████████████████████████████████████
                ████████████████
                ███████████████████
                ████████████████
            # Try not popping
            ███████████████
            ███████████████████
            ███████████

    ██████████
    ███████████


def self_describe(items):
    ████████████████████████████
    ███████████████
        ██████████████████████

    ███████████████████████████
        ██████████
            ██████████████
        █████
            ███████████████████████████
                ███████████████
                █████████████████████████████████████████████████████
                ███████████
                █████████

    ███████████████████████████████████████████████
        █████████████████████████████████████████████████████████
    ███████████


def arrow_walk(board, position):
    █████████████████████████████████████████████████
    ████████████████████████
    ████████████████████████
        ██████████████████████████████████████████████████████████████████████████████████████████
    ████████████


def itky_leda(board):
    ████████████████████████
    ██████████████████████████████
    ██████████████████████████
    ███████████████████████████████
    ████████████████████████████

    ███████████████████████████████
        ███████████
        ███████████████████████████████████████████████████
            ███████████████████
            ████████████████████████████████████████████████████████
                ███████████████████████
        █████████████

    ███████████
        ███████████████
        ██████████
        ██████████████████████████████████
            ███████████████████████████████████████████████████████████████████████████████████
            ████████████████████████████████████████████████████████████████████████████████████
            █████████████████████████████████████████
                ██████████████████████
                    ████████████
                █████████████████████████
                    ███████████████████
                    ███████████████████████
        ██████████████████
            █████████
        █████████████████████████████████████████████
        ██████████████████████████████████████████████


def lowest_common_dominator(beta, gamma):
    ██████████████████████
    █████████████████████████████████
        ████████
        ████████
        ███████████████████████
    ██████████


def str_rts(text):
    █████████████████████
    ██████████████████████████████
        ████████████████
            ████████████
        █████
            ████████████████
    █████████████
        ██████████████████████████████████████
            █████
            ██████████████████
                ███████████████████████████████████
                    ███████████████████████
                ███████████████████
    ███████████


def is_string_shuffle(first, second, result):
    ████████████████████████████████

    █████████████████████████
    ██████████████
        ██████████
            ███████████████████████████████
        ████████████
            ██████████████████████████████
        █████
            ██████████████████████████████████████████████████████████████████████████████████████████████████████

    ██████████████████


def count_cigarettes(n, k):
    ███████████████████
    ████████████
        ██████████
        ██████████
        ██████████████
        █████████████████
    ████████████


def van_der_corput(base, n):
    ██████████████████████████████████
    ████████████
        ████████████
        █████████████
        █████████████████
        ████████████████████████
    █████████████


def super_tiny_rng(seed, n, bits):
    ████████████████████
    ██████████████████
        █████
        █████████████████████
            ████████████████████████████████
            █████████████████████████████████
        ████████████████
    █████████████


def carving_egyptian(f):
    ██████████████
    ████████████
        █████████████████████████████████
        ████████████████████
        ████████████
        █████████████
            ████████████████
            ███████████████
                ████████████████
                ██████████████
                    █████████████████████
                █████
                    ███████████████████████
                    ███████████████████████████
            █████
                █████████████
    █████████████████████


def greedy_egyptian(f):
    ███████████
    ███████████
        █████████████████████████████████
        ██████████
            ████████████████
            █████████████
        ████████████████
        ████████████████
        ██████████████████████


def minimal_egyptian(f, k, n=1):
    ██████████
        ████████████
    █████████████████████████████████
    █████████████████████
        ███████████
    ████████████████████████
    ██████████████████████████████
        ███████████████████████
        ██████████████████████████████████████
            ███████████
        ██████
    ████████████


def __normalize(pins):
    █████████████████████
    ████████████████████████████████████
        ██████████
            █████
        █████████████
            ████████████████
            ████████
        █████
            ████████████
            █████████
    █████████████


def kayles(pins, depth=0):
    ██████████████████
        ████████████
    ██████████████████
        ███████████
    ██████████████████████████████
        # Knock out one pin from end.
        █████████████
        ████████████████████████████████████████████
            ███████████
        ███████████
        # Knock out two pins from end.
        █████████
            █████████████
            ████████████████████████████████████████████
                ███████████
            ███████████
        # Knock out one or two internal pins.
        ██████████████████████████████
            # One internal pin.
            █████████████
            ████████████████████
            ████████████████████████████████████████████
                ███████████
            ██████████
            ███████████
            # Two internal pins.
            █████████████
                █████████████
                ████████████████████
                ████████████████████████████████████████████
                    ███████████
                ██████████
                ███████████
    ████████████


def reversenacci(i, n):
    █████████
    ██████████████
        ███████████
        ████████████████████
            █████████
            ██████████████████
                █████
            ███████████
        █████
            ███████████
        █████████
    ████████████


def carryless_addition(a, b):
    ███████████████
    █████████████████████
        ██████████████████████████████
        ██████████████
        ███████
        ███████████████████████
    ████████████


def carryless_single_digit_multiply(a, b):
    ███████████████
    ████████████
        ██████████████████████
        ███████████████████████████
        ███████
    ████████████


def carryless_multiplication(a, b):
    ███████████████
    ███████████████████████████
    ████████████
        ████████████████████████████████████████████████████
        ██████████████████████████████████████
        ███████████
        ███████
    ████████████


def game_with_multiset(queries):
    ███████████████████████████████
    ███████████
    ███████████████████████
        ██████████████████████████
            █████████████████
        █████████████
            █████████████████
        ███████████████
            ████████
            █████████████████████
            █████████████████
            ████████████████████████████████
                ██████████████
                ██████████████████████████████████████████
            ████████████████████████
    █████████████


def nice_sequence(items, start):
    ████████████████████████████
    █████████████████████████████████████
        ████████████████████████████
            ██████████████
                █████████████████
            ██████████████
                █████████████████

    █████████

    ███████████████████████████
        █████████████
        ███████████████████████████
            ████████████████
        █████████████████████████████████████████████████████████
            ████████████████
            ████████████
            ██████████████████████
            ███████████████
            ████████████

    ███████████████████████
    ████████████████


def prize_strings(n, late_limit, absent_limit):

    ███████████████████████
    █████████████████████████████████████████████████
        ███████████████████████████████████████████████
            ████████
        ███████████
            ████████
        ██████████████████████████████████████████████████████████
        ███████████████████████████████████████████████████████████
        ███████████████████████████████████████████████████████████████████
        ████████████████████████████████████████████████

    ███████████████████████████████████████████


def goodstein(n, k):
    ███████████
    ███████████████████████
        █████████████████
        █████████████
            ████████████████████
            ████████████
        ████████████
        ███████████████
            ███████████████
            ███████████████
        ██████████
        ██████
    ████████


def max_product(digits, n, m):
    ████████

    ██████████████████████████████
        █████████████
        ███████████████████
            ███████████████████████████████████████████████████████
        ██████████████████████
            ███████████████████████████████████████████████████████
        █████
            █████
            █████████████████████████████████████████████████████████
                ██████
            ██████████████████████
                ████████████████████████████████████████████████████
                    ███████████████████████████████████████████████████████████████

    ██████████████████
    ███████████


def count_unicolour_rectangles(grid):
    ██████████████████████████████
    ██████████
    ████████████████████
        ████████████████████
            ███████████████████
            ████████████████████████
                ███████████████████████████
                    ████████████████████████
                        ███████████████████████████████████████████████
                            ███████████
    █████████████


def markov_distance(n1, n2):
    ███████████████████
        █████████████
        ██████████████
            █████████████████████████████████████
            █████████████████████████████████████
            █████████████████████████████████████
        █
        ███████████████████████████████████████████████
    ██████████
    ███████████████
        ███████████
        █████████████████
            ████████████████████
        █████
            ████████████████████
    █████████████


def gijswijt(n):
    █████████████████
    ███████████████████████████
        ██████████████
        █████████████████████████████████████████████████
            █████████████████████
                ██████████████
                ██████████████████████████
                    █████
                    ████████████
                        ██████████████████████████████████████████████
                            █████████████
                            █████
                        ██████
                    █████
                        ███████████████████
                █████
                    █████
                ██████████
                    █████
            ██████
        ███████████████████████
    ████████████████████


def parking_lot_permutation(preferred_spot):
    ███████████████████████
    ██████████████████████████████████
    ████████████████████████████████████████
        █████████████████████████████
            ███████████████
        ██████████████
    ██████████████


def tower_of_babel(blocks):
    █████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████

    ██████████████████████████
        █████████████
        ███████████████████
        ███████████████████████████████████████
            ██████████████████████████████████████████
            ███████████████████
                ████████████████████████████
            ███████████████████
                ████████████████████████████
            ███████████████████
                ████████████████████████████

    ████████████████████
    ███████████


def vector_add_reach(start, goal, vectors, giveup):
    █████████████████████████████████████
    ███████████████████████████████████████
    ███████████████████████████████████████████████████████████████
    █████████
    ███████████
        ██████████
        ██████████████████
            ███████████
        ██████████████
        ████████████████████████████
            ██████████████████████
                ███████████████████████████████████████████████████████████████
                ███████████████████████████████████
                    ███████████████████████████
                        ████████████
                    ██████████████████████████████
                        ████████████████████████████
                        ████████████████████████
        ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████


def mmu_lru(n, pages):
    █████████████████████████████████████████████████████████████
    █████████
    ███████████████████████████████
        ████████████
        █████████████████████████████████
            ██████████
                █████████████
                █████
        █████████████████
            ██████████
            ███████████████████████
            ████████████████████████████████████████████████
                █████████████████████████████████
                    █████████████████████████
            ██████████████████
        ████████████████
    ████████████


def mmu_optimal(n, pages):
    ████████████████████████
    ████████████████████████████████
    █████████████████████████████
    █████████████████████████████████████████
        █████████████████████████
    ███████████████████████████████
        ██████████████████
            ██████████
            ██████████████████████
            █████████████████████████████████
                █████████████
                    ███████████████████████
                █████
                    ███████████████████████
                        █████████████████████████████████
            ██████████████████
        █████████████
    ████████████


def count_distinct_substrings(text):
    █████████████████████████████████████████
    ██████████
        ████████
    ████████████
        █████████████
        ███████████████████
            ██████████████████
            ███████████████████
        ████████████████████
        ███████████████
        ██████
    █████████████


def measure_balsam(flasks, goal):
    █████████████████████████
    ████████████████████████████
    ███████████████████
    ███████████████████████████████████
    █████████████████████
        ████████████
        ██████████
        ██████████████████
            ██████████████████
                ███████████████
                    ██████████████████
                        ██████████████████████████████████
                            ████████████████████████████████████████
                            ███████████████████
                            ████████████████████
                            ████████████████████
                            █████████████████████
                                ████████████
                            ██████████████████████████████
                            ███████████████████████████
                                █████████████████████
                                █████████████████████████
        ███████████████
    ███████████


def digit_partition(digits, n):

    ██████████████████
        ██████████
            █████████████
        █████████
            ████████████
        ████████████████
        ██████████
            ████████████
        ████████████████████████
            ████████████████████████████████████████████
                ███████████
        ████████████

    ██████████████████████████████


def tr(text, ch_from, ch_to):
    ██████████████████████████████████████████████████
    ███████████████████████████████████████████


def cube_tower(cubes):
    ██████████████

    ███████████████████████
    ██████████████
        █████████
        ██████████
            # Take cube i to the tower, if you can
            ██████████████████
                █████████████████████████████████
                    █████████████████████████████████████████████████████
            # Leave out the cube i from the tower
            ███████████████████████████████
        ████████████

    █████████████████████


def des_chiffres(board, goal):
    ██████████████

    ████████████████████████
        ███████████████
            ████████████
        ████████████████
        ████████
        █████████████████████
            ██████████████
            ██████████████
                ████████████████████████
                    ██████████████
                    ████████████████████████████████████████████████
                    ████████████████
                        ███████████████████
                    ██████████████
                        ███████████
                    █████████████████████████████████████████████████████████
                    ████████████
                        ████████████████████████████████████████████
                            ███████████
            █████████

    █████████████████████████
        █████████████████████████████
            ████████████
    ███████████


def squares_total_area(points):
    ██████████
    █████████████████████
        █████████████
        ██████████████████████████
            ███████████████████████
                ███████████████████████████
            █████████████████████████████
                ████████████████
            ██████████████████████████████████████████
                █████
            ████████████████████████████████
                ████████████████
            █████████
                █████
        █████
            ███████████████████████
    ██████████████████████████████████████


def fewest_boxes(items, weight_limit):
    ██████████████████████████████████████
    ███████████████
        ██████████████
        █████████████████████████████████████████████████████
            ███████
        ███████
    ████████████████


def bridge_score(strain, level, vul, doubled, made):
    ███████████████████████████████████████
    ███████████████████

    # Add up the values of individual tricks.
    ██████████████████████████████
        # Raw points for this trick.
        █████████████████████████████████████████████
            ████████
        ██████████████████████████████████████████████
            ████████
        █████
            ██████████████████████████████
        # Score from the raw points.
        ████████████████████# Part of contract
            ██████████████████
        ████████████████# Undoubled overtrick
            ██████████████████
        ████████████████# Doubled overtrick
            ████████████████████████████
        ███████# Redoubled overtrick
            ████████████████████████████
    ██████████████████# Game bonus
        ████████████████████████████
    ███████# Partscore bonus
        ███████████
    ████████████████# Small slam bonus
        ████████████████████████████
    ████████████████# Grand slam bonus
        ██████████████████████████████
    ██████████████
    ██████████████# Insult bonus for making a (re)doubled contract
        ███████████
    ██████████████
        ████████████
    ████████████


def trip_plan(motels, daily_drive):
    # Prepend a zero to the motels list to serve as sta.
    █████████████████████
    # Initialize the cost and move tables.
    ███████████████
    ██████████████████████████████████# Optimal solution cost starting from each motel.
    ██████████████████████████████████# The optimal first move starting from each motel.

    # Fill in the optimal cost and move tables.
    ███████████████# Base case of recursion.
    ████████████████████████████
        ███████████████████████
            ███████████████████████████████████████████████████████████████████
            ███████████████████████████████████████████
                ████████████████████
                ███████████

    # Reconstruct the optimal solution from the move table.
    ████████████████████
    █████████████████
        █████████████████
        ███████████████████████████
    █████████████


def __extract_number(text, pos):
    █████
    ██████████████████████████████████████████████
        ███████████████████████████
        ████████
    █████████████


def tog_comparison(first, second):
    ███████
    █████████████████████████████████████████████
        ████████████████████████████████
        █████████████████████████████████
            ████████████████████████████████████
            ███████████████████████████████████████
        █████
            █████████████████████████
            ████████
        ███████████
            █████████
        █████████████
            █████████
    ████████████████████
        █████████
    ███████████████████████
        █████████
    █████
        ████████


def repetition_resistant(n):
    █████████████████████████
    █████████████████████████
        ██████████████████████████████████████████████████
        █████████████████████████████████
        █████████████████████████████████████████████████████
        ████████████████████████████████████████████████████
        ████████████████████████████████████████████████████
        █████████████████████████████████████████████
        █████████████████████████████████████
    ██████████████████


def kimberling_expulsion(start, end):
    ██████████████████████████████
    ███████████████████████████████████████████
    ███████████

    █████████████
        ██████████████
        █████████████████████████████
            ████████████████████████
            ██████████
        ██████████████████████

    ███████████████████████████
        █████████████████████
        █████████████
        █████████████████████████
            ███████████████████████████
            ███████████████████████████
        █████████████████████

    ███████████████████████████████████████████
    █████████████


def hofstadter_figure_figure(n):
    ███████████████████████████████
    ████████████████████████
        █████████████████████████████████
        █████████████████████
        ███████████████████████
        █████████████████████████████████
            ██████████████
        ███████████████████████████████
            ██████████
        █████████████████████
    █████████████████████████████


def langford_violations(items):
    ██████████████████████████████
    ███████████████████████████████████
    █████████████████████████████
        ███████████████████
            ███████████
        ██████████████████████████
            ███████████████
    ████████████████████


def shotgun(n):
    █████████
    ████████████
        ██████████
        ███████████████
            ████████████████████████████████████████████
        ██████
    ████████


# Cleaner solution submitted by Karel Tutsu.

def count_palindromes(text):
    ████████████████████████
    █████████████████████████
        # 0 - Case Odd & 1 - Case Even
        ████████████████
            ██████████████████████
            ████████████████████████████████████████████████████████████
                ███████████████████████████
                    ███████████
                █████████
                ██████████
    █████████████


def mu_torere_moves(board, player):
    █████████████████████████████████
    █████████
    █████████████████████████████████
    ████████████████████████████
    █████████████████████████████
        ███████████████
            ██████████████████████████████████████
            # Move left
            ████████████████████████
                █████████████████████████████████████████████████████
                ██████████████████████████████████
                █████████████████████████████████████████████████████
            # Move right
            █████████████████████████
                ███████████████████████████████████████████████████████
                ██████████████████████████████████
                ███████████████████████████████████████████████████████
            # Move to center
            █████████████████████████████████████████████████████████████████████████
                ████████████████
                ████████████████████████████████████
                ███████████████████
        # Move from center
        █████████████████████████████████
            ███████████████████
            █████████████████████████████████
            ████████████████
    ████████████████████


def discrete_rounding(n):
    █████████████████████████████
        ██████████
        █████████████
            ███████████████
    ████████


def stern_brocot(x):
    ███████████████████████
    ███████████
    ███████████
        ██████████████████████████
        ████████████████
        ██████████
            █████████████
        ███████████
            █████████████████████████████████
        █████
            █████████████████████████████████


def abacaba(n):
    ███████████
    █████████████████
        ███████████████████
    ███████████
        ████████████████
        ███████████
            ████████████
        ████████████
            ██████████████
        ████████████████████


__keys = {'a': 2, 'b': 2, 'c': 2, 'd': 3, 'e': 3, 'f': 3, 'g': 4, 'h': 4, 'i': 4,
          ███████████████████████████████████████████████████████████████████████
          ███████████████████████████████████████████████████████████████

__word_keys = dict()


def keypad_words(number, words):
    ███████████████████
        ██████████████████
            ████████████████████████████████████████████
            ███████████████████████
                ██████████████████████████████
            █████
                ██████████████████████████

    █████████████████████
    ██████████████████████████
        █████████████████████
            ███████████
        █████
            ███████████
            ████████████████████████████████████
                ████████████████████████
                ██████████████████████████████████████████████
                    ████████████████████████████████████████
                        ██████████
                            ████████████████████████████████████
                        █████
                            █████████████████████
            █████████████

    ████████████████████████████████████████


def break_bad(word, elements):
    ██████████████████████████████████████
    # Cost of breaking word starting from given position.
    ████████████████████████████████
    # The optimal move to make in each position.
    ████████████████████████████████

    # Fill in the cost and move tables from end to beginning.
    ██████████████████████████████
        # Try a one-letter element.
        █████████████████████████████████
            █████████████████████████████
            █████████████
        █████
            █████████████████████████████
        # Try a two-letter element.
        ████████████████████████████████████████████████████████████████████████████████████████
            █████████████████████████
            █████████████

    # Reconstruct the optimal solution from the cost table.
    ███████████████████
    ██████████████
        ██████████████████
            ██████████████████████████████████████████
            ████████
        ████████████████████
            ██████████████████████████████████
            ████████
        █████
            ███████████████████
            ████████
    █████████████


def forbidden_digit(n, d):
    ██████████
        ████████████████████████
    ███████████
    ████████████
        ██████████████████████
        ███████████████████████████████████████████████
    █████████████████████████████████████


def blocking_pawns(n, queens):
    ████████████████████████████████
    ████████████████████
    █████████████████████████████████████████████████████████████████████████████

    ████████████████████████████████████████████
        █████████████████████████
        ███████████████████████████
            █████████████████████████
                ███████████
            █████
                █████████████████████████
        ████████████

    ███████████████████████████
        █████████████████████
        █████████████████████
            █████████████████████
                ███████████████████████
                ██████████████████████████████████
                    ██████████████████████
                        █████████████████████
                            ███████████████████████████████████████████████
                        █████
                    █████
                        █████████████████████████
        ████████████████████

    ██████████████████████████
        █████████████
        █████████████████
            ██████
        ██████████████████████████
            ████████████
        █████
            █████████████████████████████████████████████████
            █████████████████████████
            ███████████████████████████
                ████████████
                ███████████████████████████████████████████████████████
                    █████████████████████████████████████████████████
                        ████████████████████████████████████████████████████
                ████████████████████
                    █████████████████████████
                █████████████████████████
                ████████████████████
                    ██████████████████████
                █████████████████████████
            ████████████████████████████████████████████████

    █████████████████████████████████████
    █████████████████
    ███████████


def optimal_blackjack(deck):
    ████████████████████████████████

    ████████████████████████████████
        █████████████
        ██████████████
            █████████
        ███████████████████████
            ███████████
            █████████
        ██████████████████

    █████████████████████
    █████████████████████
        ████████████████
            ████████
        █████████████████████████████████████████████████████
        ██████████████████████████████████████████████████████████████████████████████
        █████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████████████████████████████████
        █████████████████████████████
        █████████████████████████
            ████████████████████████████████████████████████████████████████████████████████
            ████████████████████████
                ██████████████████████████████████████████████████████████████████████████████
                ████████████████████
            ███████████████████████████████████████████████████████████████████████████████████████████████
            ████████████████████████████████████████████████████████████
            ████████████████████████████████████████████████████████████████████████████████████████████
            ████████████████████
        ████████████████████████████████████████████████████████

    █████████████████████


def insertion_sort_swaps(items):
    ████████████████████████
    █████████████████████
        █████████████████████
        ████████████████████████████████████
            ██████████
            ███████████████████████
            ██████
        ███████████████
    ████████████


def stalin_sort(items):
    █████████████
        ████████
    █████████████████████████████████
    ███████████
        ████████████████████████████████████████
        ███████████████
            ████████████
                ████████████████
            █████
                ████████████████
                ████████
        ███████████
        ██████████████
            █████████████
        ███████████████████████


def smetana_interpreter(program):
    ██████████████████████
        █████████████████████████████████
        ███████████████████████████████
        █████████████████
            ████████████████████████████
        ███████████████████
            █████████████████████████████████
            ███████████████████████████████████████
            ███████████████████████
        █████████████████████████

    ██████████████
    ██████████████████████████████████████████████████████████████████████████
    ███████████
        ███████████████
        ██████████████████████
            █████████████████
        ███████████████████████
            ██████████████████████
            ████████████████████
                ███████████


def card_row_game(cards):
    ██████████████

    ██████████████████████████████
    ████████████████
        ██████████
            ███████████████
        █████
            ██████████████████████████████████████████████████████████████████

    ██████████████████████


def has_majority(items):
    ███████████████████████████████
    ███████████████
        ███████████████
            ████████
            ██████████
        █████
            ████████████████████████████████
    ███████████████
        ██████████████████████████████
    ███████████████


def bus_travel(schedule, goal):
    ███████████████████████████████████████████████████
    ████████████████████████
        █████████████████████████████
        ████████████████████████████
        ███████████████████████████████████████████████████████████
            ███████████████████████████████████
                ███████████████████████
                    ████████████████████████
                █████████████████████████████████████████████████████████████████
                    █████████████████████████████
                    █████████████████████████
    ███████████


def multiplicative_persistence(n, ignore_zeros=False):
    ██████████
    ████████████
        ███████████
        ████████
        ████████████
            ██████████
            █████████████████████████████
                █████████
            ███████████
        ████████
    █████████████


def count_odd_sum_sublists(items):
    █████████████████████████████████████████████████
    ███████████████
        ██████████
        ██████████████████
            ███████████████████
            ███████████████
        █████
            ████████████████████
            ██████████████
    █████████████


def largest_ones_square(board):

    ████████████
    ████████████████████
        ████████████████████████████████████████████████
            ████████
        █████
            █████████████████████████████████████████████████████████████████████████████████

    ██████████████████████████████████████████████████████████████████████████████████


def accumulate_dice(d, goal):
    ██████████████████████

    █████████████████████████
    ███████████████
        ██████████
            ██████████████████████████████████
        █████
            ██████████████████████████████████████████████
            █████████████████████████████████████████████
                ████████████████████████████████
            ████████████

    █████████████████████████████████████████████████████


@lru_cache(maxsize=10000)
def knight_survival(n, x, y, k):
    ██████████████████████████████████████
        █████████████
    ████████████
        ████████████
    ███████████████████████████████████████████████████████████████████████████████████████████████████


def bowling_score(frames):
    █████████████████████████████████████████
    ███████████████████████████████

    ██████████████████
    ████████████████████████████
        ███████████████████████████████████████████████

    █████████████████
    ███████████████████
        ███████████████████
            ███████████████████████████████████████████
            ████████
        █████
            ████████████████████████████████
            ███████████████████████████████████████████████████
            ████████
    ████████████


def word_board(board, words):
    ████████████████████████████████████████████

    ███████████████████████████████
        █████████████████████
        ████████████████████████████████████
        ██████████████████████████████████████████████████████████
            ████████████████████████████
                █████████████████████
            ███████████████████████████████████████████████████
                █████████████████████████
                ███████████████████████████████████████████████████████████
                    ██████████████████████████████████████████
        ████████████████████████

    ██████████████████████████████████████████
        █████████████████████████
    ████████████████████


def lindenmayer(rules, n, start='A'):
    █████████████████████████
    █████████████████████
        █████████████████████████████████████████████████████████████████████

    # How many steps are needed to make result long enough to contain position n?
    ████████████████████████
    ██████████████████████████████
        ██████████

    # Find the position n in the correct branch of the Lindenmayer subtree.
    ████████████████████████████████
        ████████████████████████████
            █████████████████████████████
            █████████████
                █████████
            █████
                █████
    █████████████


def mian_chowla(i):
    ██████████████████████
    ██████████████████████████████
        ███████████████████████████████████████████
        ███████████
            ███████████████████████
                ██████████████████████████
                    █████
            ███████# Executed if previous loop didn't break
                █████
            ██████
        ███████████████████████
            ████████████████████████
            ███████████████████████████████████████
                █████████████████████████████████████
                ████████████████████
        ███████████████████████
    ███████████████████████


def costas_array(rows):
    █████████████████████████████████████████
    ████████████████████████████████████████████████████████████████
    █████████████████████████████████████

    ██████████████████████████████████████████
        ███████████████████████
            ███████████████████████████
            ███████████████████████████████████████
            ████████████████████████████████████████
                ████████████
            █████████████████
            ██████████████████████████
                ███████████████████████████
        █████████████████
        ███████████████████████
        ███████████

    ██████████████████████████████████
        ███████████████████
            ████████████████████████████
                ████████████

    █████████████████████
        █████████████████████
            ███████████
        ███████████████████
        ███████████████
        ████████████████████
            ███████████████████
                ████████████████████████████████████
                    ████████████████████
                        ███████████
                    ██████████████████████
                    ███████████████
                ██████████████████████████
                    ████████████████████████████
        ███████████████████
        ████████████

    ███████████████████████


def topswops(perm):
    ██████████
    ███████████████████
        ███████████
        █████████████████████████████████
        █████████████████
        █████████████████████
        ███████████
    █████████████


def sum_of_consecutive_squares(n):
    ██████
    ██████████████████
        ███████
    ██████████████████████
    ████████████████
        ██████████████# Sum is too big, make it smaller
            ███████████████
            ███████
            ███████████
                ██████████████████████
            ███████████████████████████████████████████# Give up, if all squares up to hi are not enough
                ████████████
        ███████# Sum is too small, make it bigger
            ███████
            ███████████████
    ███████████


def is_chess_960(row):
    █████████████████████████████████████████████████████████████████████████████████████████████████


def queen_captures_all(queen, pawns):
    # Check whether pawn1 is located between queen and pawn2 on the board.
    # Assumes that queen, pawn1 and pawn2 are collinear.
    █████████████████████████████████████
        █████████████████
            ███████████
        ███████████████
        ████████████████
        ████████████████
        ████████████████████████████████████████████████████████████████████████

    # Returns the list of pawns nearest to queen to each of the eight directions.
    █████████████████████████████████
        ███████████████
        ████████████████████
        ███████████████████
            █████████████
            █████████████████████████
            ███████████████████████████████████████████████████████████████
                ███████████████████# N
            █████████████████████████████████████████████████████████████████
                ███████████████████# S
            █████████████████████████████████████████████████████████████████
                ███████████████████# E
            █████████████████████████████████████████████████████████████████
                ███████████████████# W
            ██████████████████████████████████████████████████████████████████
                ███████████████████# NE
            ██████████████████████████████████████████████████████████████████
                ███████████████████# SW
            ███████████████████████████████████████████████████████████████████
                ███████████████████# SE
            ███████████████████████████████████████████████████████████████████
                ███████████████████# NW
        █████████████████████████████████████████████████████

    # Recursive algorithm to determine whether queen can capture all pawns.
    ████████████████████████████████████
        ████████████████████
            ███████████
        █████████████████████████████████████████
            ███████████████████
            █████████████████████████████████
                ███████████
            ████████████████
        ████████████

    █████████████████████████████████████████


__add_cache = dict()


def addition_chain(n, brauer=False):
    █████████
        ████████████████████████
    ██████████████
        ████████████████████████████████████████
            ██████████████████████████████
        █████
            ██████████████████████████████████
    █████
        ████████████

    ████████████████████
        █████████████
        ██████████████████████████
        █████████████████████
        █████████████
            ███████████████████████████
        ██████████████████████████████
            ████████████
        █████████████
            ██████████████████
            ██████████████████████████████████████████
                ███████████████████████████
                    ████████████
                ████████
            ███████████
        ██████████████████████
            ████████████████
            ███████████████
            ████████████
        █████
            █████████████████████████████████
            ██████████████████████████████████████████████████
                █████
                ██████████████████████████████████████████████
                    ███████████████████████████
                    █████████████████████████████████
                        ██████████████
                        ██████████████████
                        ███████████████████
                            ███████████
                        ████████████
                    ██████
                ██████████████████████████

    ███████████████
    █████████████████████
    ███████████████


def count_deadwood(hand):
    ███████████
    ███████████████████████████████████████████████████████████████████
    ████████████████████
    # Counter for how many times each rank appears in hand
    ████████████████████████████████████████████████████████████████████████████
    ████████████████████

    ███████████████████████████████████████████████
        █████████████████████
        ██████████████████████████████████
            ████████████
        █████████████
            ███████████████████████████████████████████████████████████████████
                ████████████████████████████████████████████████
                ████████
            █████
                ████████████
        ████████████████████████
        ██████████████████████████████████████████████████████████████████
            ████████████
        ██████████████████████████████████████████████████████████████████████
            ████████████
        ██████████████████████
        ████████████

        # Join an existing run?
        ███████████████
        ██████████████
            ██████████████████████
            ███████████████████████████████████████
                ██████████████
                ██████████████████████
                ████████████████████████████████████████████████████████████████
                ███████
        # Start a new run
        █████████████████████████████████████████████████████████████████████████████████
            ███████████████████████████
            ████████████████████████████████████████████████████████████████
            ██████████
        # Join an existing set?
        ███████████████
        ██████████████
            ██████████████████████
            █████████████████
                ██████████████
                ██████████████████████
                ████████████████████████████████████████████████████████████████
                ███████
        # Start a new set?
        █████████████████████████████████████████
            ███████████████████████████
            ████████████████████████████████████████████████████████████████
            ██████████
        # Leave as deadwood?
        █████████████████████████████████
        ████████████████████████████████████████████████████████████████████████████████

        ██████████████████████
        ███████████

    ██████████████████████████████████████████


def count_sevens(n):
    ██████████
        ████████████████████████
    ███████████
    █████████████████████████████████
    ███████████████████████████████████████████████████████████████
    ██████████████████
    ███████████████████████████████
    ██████████████████████████████████████████████████████████


def count_morse(message, letters):
    ██████████████████████████
    █████████████████████████
        █████████████████████
            ████████
        █████████
        ██████████████████████████████████
            ███████████████████
            ████████████████████████████████████
                ████████████████████████████████████████████████████████████████
        ████████████

    ██████████████████████████


def othello_moves(othello, desdemona):
    ███████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████
        ██████████████████
            █████████████████████████████████████████
                ███████████
                █████████████████████
                    ███████████████████████████████████
                    █████████████████████████████████████████████████████
                        ███████████████████████████████████████████████
                    ██████████████████████████████████████████████████████████████████
                        ██████████████████
                ███████████████
                    █████████████████████████████
    ███████████████████████████████████████████████████████


__liang = dict()


def liang_hyphenation(word, patterns):
    ███████████████████████████████████████
    ███████████████████████
    █████████████████████
        # Initialize the global pattern dictionary first time this function is called.
        ██████████████████
            ██████████████████████████████████████████████████
    █████████████
    ██████████████████████████████
    ██████████████████
        █████████████████████████████████████
            ███████████████████
            ██████████████████
                ██████████████████████████
                █████████████
                    ████████████████
                        ████████
                    █████
                        ██████████████████████████████████████
    █████████████████████████████
    ██████████████████████████████
        ████████████████████████████████████████████████████
            █████████████
        ███████████
    █████████████


def ordinal_transform(seed, i):
    ███████████████████████████████████████
    ████████████████████████████████████
        ██████████████████████████████████████
        ███████████████████████████████████████
        ███████████████████████████
            ███████████
            ████████████████████████████
            ███████████████████████
        ███████████████
        █████████████
    ███████████████
    ██████████████


def staircase(digits):
    ███████████████

    █████████████████████████████
    ███████████████████████
        ██████████
            ████████
        ███████████████
        ████████████████████████████
        ████████████████████████████████████████████████████████████████████████████
        █████████████████████████████████
            ██████
        ██████████████████████████
        ███████████████████████

    ████████████████████


def both_ways(text):
    ████████████
    ██████████████████████████████
        ████████████
            ████████████████
        █████
            ████████████
    █████
    █████████████
        █████████████████
        ██████████████████
        ██████████
            ████████████████████████
                ████████████████████████████████████████
                    █████
                ████████████████████████████████
                    ████████████████
                    ████████████████
                    █████████████████
                        █████
                        ███████████████████████████████████
                            █████████████████████████████
                        █████████████
                    █████
                        █████
    ████████


def __gcd(a, b):
    ████████████
        ███████████████
    ████████


def __strokes_needed(hole, c1, c2, best):
    # If we can use just the higher club, that is the optimal solution.
    ██████████████████
        █████████████████
    # If we can use just the lower club, improve the solution for now.
    ██████████████████
        ████████████████████████████
    # Positive c1, positive c2.
    █████████████████
    ███████████████
        █████████████████████████
        ████████████████████
            ███████████████████
            █████████████████████████████
            █████
        █████████
    # Positive c1, negative c2.
    █████████████████████
    ██████████████████
        ███████████████████████
        ██████████████████
            █████████████████
            █████████████████████████████
            █████
        █████████
    # Non-positive c1, positive c2.
    █████████████████████
    ██████████████████
        ███████████████████████
        ██████████████████
            █████████████████
            █████████████████████████████
            █████
        █████████
    ███████████


def best_clubs(holes):
    ███████████████████████████████████████████████████
    ███████████████████
        █████████████████
        ██████████████████████████████████
            █████████████████████████████████
            ██████████████████
                ██████████████████████████████████████████████████████████████
                █████████████████
                    █████
                ███████████
            █████
                ████████████
        ███████████████████████████████████████████████████
    ███████████


def illuminate_all(lights):
    █████████████████

    █████████████████████████
    ██████████████████████████
        █████████████
            ██████████████
        █████████████
            ████████████████████████████████
        ██████████
        █████████████████████████████████████████████████
            █████████████████████████████████████████████████
        ████████████████████████████████████
        ███████████████████████

    ████████████████████████████


def verify_betweenness(perm, constraints):
    █████████████
    ███████████████████████████
    ██████████████████████████████
        ██████████
    █████████████████████████████
        ███████████████████████████████████
        ██████████████████████████████████████
            ████████████
    ███████████


def stepping_stones(n, ones):
    █████████████████████████████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████
    ████████████████████████████████████████
    █████████████████████████████████████████████████████████████

    ███████████████████
        █████████████████████████████████████████████████████████████████
        ███████████████████
        █████████████
        █████████████████████
            ███████████████████████
            ██████████████████████████████████████████████████████
                ███████████████████
                ██████████████████
                    ███████████████████
                    █████████████████████████████
                    ██████████████████████████████
                    ███████████████████████████████████
                █████
                    # Treat a cell with an impossibly large value as having already been filled.
                    █████████████████████
                    ████████████████████████████████████
        ███████████████

    ███████████████████████████████

    ███████████████████
        ████████████████████████████████
        ████████████
        ████████████████████████████████
            ████████████████████
                █████████████████████████
                █████████████████████
                ████████████████████████████████████
                ███████████████████████
                    █████████████████████████████████████████
                ████████████████████
                ████████████████████████████████████
                    █████████
                        █████████████████████████████████
                    █████
                        ██████████████████████
                    ██████████████████████████
                    ███████████████████
                ████████████
        ███████████

    ███████████████████
        ██████████████
    █████████████████


def laser_aliens(n, aliens):
    # Precompute sets of aliens in each row and column.
    ██████████████████████████████████████
    ██████████████████████████████████████
    █████████████████████████
        ████████████████████████
        ████████████████████████
    # Sort the rows based on how many aliens are on that row.
    █████████████████████████████████████████████████████████████████████████████

    █████████████████

    # Recursive backtracking search to find the solution within given limit.
    ███████████████████████████
        ██████████████████████
        # Negative and positive base cases of the recursion.
        ███████████████████████████
            ██████
        ████████████████████████
            ██████████████████████████████████████████
            ██████
        ████████████████████████
        # Have all the aliens that were on this row been eliminated already?
        ██████████████████████████████████
            █████████████████████████████████
        # Try shooting one laser through this row, if there are at least two aliens.
        █████████████████████████████████
            ██████████████████████████████
        # Try shooting laser through every column that has an alien on this row.
        ███████████████████████████████████████████████████████
            ███████████████
            ██████████████████████████████
                ███████████████████████
                    █████████████████
                        █████████████████████████
                        ███████████████████████
            ██████████████████████████████████████████████████████
            ██████████████████████████
                █████████████████████
        # Didn't work either way.
        ████████████

    ███████████
    ████████████████████


def domino_tile(rows):
    ██████████████████████
        ████████
    ████████████████████████████████████████████████████████

    █████████████████████████████████████
        █████████████████
        # Find the first uncovered square starting from (row_idx, col_idx).
        ███████████
            ████████████████
                # Current row has been fully filled, start filling above row.
                ███████████████
                    ████████████████████████████████████████████
                        █████████████████████████████████████████████
                    █████
                        ███████████████████████████████████████
                        ███████████████████████████████████████████████
                        █████████████
                █████
                    # The entire room has been filled.
                    ████████
            ████████████████████████████████████████
                ████████████
            █████
                █████
        ██████████
        # Count the ways to complete filling with domino placed horizontally here.
        █████████████████████████████████████████████████████████████████
            ██████████████████████████████████████████████
        # Count the ways to complete filling with domino placed vertically here.
        ███████████████████████████████████████████████
            █████████████████
            ███████████████████
            ███████████████████████
            ██████████████████████████████████████████████
            ███████████████████████
            ███████████████████
        # The total number of ways to complete the filling from this position.
        █████████████

    ████████████████████████████████████████████████████████████████████████████████████████████


def cut_into_squares(a, b):
    ██████████
        ████████
    ███████████████████████████
    ███████████████████████████████████████


@lru_cache(maxsize=10 ** 5)
def __cut(a, b):
    ████████████
    ██████████████████████████████
        █████████████████████████████████████████████████████████████████████████
    ██████████████████████████████
        █████████████████████████████████████████████████████████████████████████
    ███████████


def collect_numbers(perm):
    ████████████████████████
    ███████████████████████
    ██████████████████████████████
        ██████████
    ██████████████████████████
        █████████████████████
            ███████████
        █████████████████
    █████████████


def cut_corners(points):
    █████████████████████████████████████████████████
    ████████████████████████████████████████████
    ██████████████████████████████████████████
    █████████████████████████████████████
        █████████
        ██████████████████████████████████
            ████████████████████
            ███████████████████████████
                ███████████████████
                █████████████████████████
                ████████████████████████████████
                ████████████████████████████████
                ████████████████████████████████
            ██████

    ███████████████████████████████████████████████████████████████████████████

    ███████████████████████████████████████████
        █████████████████
        ████████████
            ████████████████████████████████
                ██████████████████████████
            ███████████████████
        ██████████████████████████████
            ███████████████████
        ██████████████████
        █████████████████████
            ████████████████
                █████████████████████████████████████████████████
            █████████████████
                █████████████████
        ██████████████████████████████████████
            █████████████████████████████████████████████████
                ██████████████
                █████████████████████████████████████████████████
                █████████████████
                ██████████████████████████████████
        █████████████████

    ██████████████████████████████████████████████████████████


def count_corners(points):
    █████████████████████████████████████████████████
    █████████████████████████████████████
        █████████
        ██████████████████████████████████
            ████████████████████
            ███████████████████████████
                ██████████
            ██████
    ████████████


def count_troikas(items):
    ███████████████████████████
    ███████████████████████████████
        ████████████
            ████████████████
        █████
            ████████████
    █████████
    █████████████
        ██████████████████████████████████████
            ███████████████████
            ███████████████████████████
                ██████████
    ████████████


def seven_zero(n):
    ██████████████████
    # Divide away the factors of 2 and 5
    █████████████████
        ██████████████████████████
    █████████████████
        ████████████████████████████
    # Go through the numbers with consecutive sevens
    █████
    █████████████████
        ██████████████
    ███████████████████████████████████


def count_carries(a, b):
    █████████████████████████
    █████████████████████
        ███████████
        ███████████
        ███████████
        ███████████
        █████████████████████████████
        ████████████████████
    ██████████████████


def first_preceded_by_smaller(items, k=1):
    ██████████████████████████████
        █████████████████
        ██████████████████
            ███████████████████████
                ██████████████████
                ██████████████████████
                    ███████████████
    ███████████


def sort_by_digit_count(items):
    ██████████████████████████████████████████████████████████████████████████████████████


def leibniz(heads, pos):
    █████████
    ███████████████
        ███████████
        ██████████████
            ███████████████████████████
        ████████████
    ███████████
    █████████████
        ██████████████████████
    █████████████


def candy_share(candies):
    ███████████████████████████
    ██████████████████████████████████
        ████████████████████████████████████████████████████████████████████
        █████████████████████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████
        ███████████████████████████████████████████████████
        ███████████
    █████████████


def __110(a, b, c):  # Rule 110 hardcoded
    ████████████████████████████████████████████████████████████████████████████████


def __110_forward(prev):  # For verification purposes of solutions for reverse_110
    █████████████
    ████████████████████████████
    ██████████████████
        ██████████████████████████████████████████████████████████████
    ███████████


def __rec110(prev, curr):
    █████████████
    █████████
        ██████████████████████████████████████████████████████
            ███████████
    ██████████████████
        █████████████████████████████████████████████████████
            ███████████
        ██████████████████████████████████████████████████
            ███████████
        █████
            ███████████
    ██████████████████
        ██████████████
        █████████████████████████████
        ██████████████████████
            █████████████
        ██████████
    ███████████


def reverse_110(curr):
    ███████████████████████████
    ██████████████████████
        ████████████████████████████████████
    █████████████


def hourglass_flips(glasses, tt):
    ██████████████████████████████████# Big M value to represent "no solution"

    ██████████████████████████████████
        █████████████
            ████████████████
        ████████████████████████████████████
        ██████████████# Can measure t from one hourglass.
            ██████████████████
        # Past the previous hurdle, we know that at least one flip will be needed.
        █████████████████████████# Time before first glass runs out.
        █████████████████████# Impossible with the current hourglasses
            ██████████████████
        # New hourglasses after s minutes have elapsed.
        ███████████████████████████████████████████████████████
        # Which of these hourglasses are currently u/l symmetric?
        ████████████████████████████████
        # Best solution known for the current subproblem.
        █████████████████████████████
        # Try out all subsets of hourglasses to flip.
        ██████████████████████████████████████████████
            # Do not branch on flipping a currently u/l symmetric hourglass.
            ███████████████████████████████████████████████████████
                █████████████████# How many hourglasses are flipped this time.
                # Find the optimal way to measure the remaining time.
                ████████████████████████████████████████████████████████████████████████████████████████
                                          ██████
                                          ████████████████████████████████
                                          ██████
                ██████████████████████
                    ████████████████████████████████████████████
        ██████████████████████

    █████████████████████████████████████████████████
    █████████████████████████████████████


def conjugate_regular(infinitive, subject, tense):
    ███████████
        ██████████████████████████████████████████
        ███████████████████████████████████████████████
        ████████████████████████████████████
    █

    ███████████████████████████████████████

    ██████████████████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████████████████████████████████████████████████

    ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████████████████████████████

    ████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

    █████████████████████████████████████████████████████████████████████████████████████████████████████

    ██████████
        ████████████████████████████████
        ████████████████████████████████
        ████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ████████████████████████████████████
        ████████████████████████████████████
        ████████████████████████████████████
    █

    # Future tense is formed by modifying the infinitive.
    █████████████████████
        █████████████████████████████████████████
    # Present, past and imperfect past tenses are modified from stem.
    █████
        ██████████████████████
        ████████████████████████
        ████████████████████████████████████████████████
    █████████████


def frequency_sort(items):
    ███████████████
    ███████████████
        ████████████████████████████████
    ███████████████████████████████████████████████████████


def extract_increasing(digits):
    █████████████████████████████████████
    ████████████████
        ███████████████████████████████
        ██████████████████████
            ██████████████████████
            ██████████████████████████████
    █████████████


def josephus(n, k):
    ████████████████████████████████████████████
    ████████████
        █████████████████
        ████████████████████████████
        ████████████████
            ██████████████
        █████
            ██████████████████████████████████████████████
        ██████
    █████████████


def brussels_choice_step(n, mink, maxk):
    ███████████████████████
    ██████████████████████████████████████
        ███████████████████████████████
            ███████████████████
                █████
            ████████████████████████████████████████████████
            ███████████
            ████████████████████████████████████████████
            ███████████████
                █████████████████████████████████████████████
    █████████████████████


def fibonacci_sum(n):
    # Expand __fibs if necessary.
    █████████████████████
        ██████████████████████████████████████

    # Use binary search to find the largest Fibonacci number <= n.
    ██████████████████████████████████████

    # Extract Fibonacci numbers in descending order as they fit.
    ████████████
        ██████████████████
            ████████████████████████
            ██████████████
            ██████
        █████
            ██████
    █████████████


def bridge_hand_shape(hand):
    █████████████████████
    ██████████████████████
        ██████████████████████████████████████████████████████████████████
    █████████████


def hand_shape_distribution(hands):
    ███████████
    ██████████████████
        █████████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████
    █████████████


def reverse_ascending_sublists(items):
    █████████████████████
    ██████████████████████████████
        ██████████████████████████████████████████████████
            ██████████████
        █████
            ██████████████
            ███████████████████
            ██████████
    █████████████


def fractran(n, prog, giveup=1000):
    ██████████████████████████████████████████
    ███████████████████████████
    ██████████████████████████
        ██████████████
            █████████
            ██████████████████████
                ███████████████
                ███████████████
                ████████████████
                █████
        ███████# Executed if the previous loop didn't break
            █████
    █████████████


def collapse_intervals(items):
    █████████████
        █████████
    ████████████████████████████████████
    ██████████████████
        ██████████████████████████████████████████
            ███████████████████
        █████
            ██████████████████████████████████████████
            █████████████
            ███████████████
    ██████████████████████████████████████████
    █████████████


def __encode_interval(curr, first):
    █████████████████████████████
    █████████████████
        █████████████████████████████████
    █████
        ██████████████████████
    █████████████


def riffle(items, out=True):
    ███████████████████████████████
    ██████████████████
        ███████
            ███████████████████████
            ███████████████████████████
        █████
            ███████████████████████████
            ███████████████████████
    █████████████


def expand_intervals(intervals):
    ███████████
    ██████████████████████
        █████████████████████████████████
            ███████████████████████
            ███████████████████████████████████████████████████████
    █████████████


def nearest_smaller(items):
    ███████████████████████
    ███████████████████████████████
        █████
        ██████████████████████████
            ████████████████████████████████████
            ████████████████████████████████████████
            █████████████████████
            ██████████
                ██████████████
                █████
            ██████
        █████
            █████████████
    ██████████


def __word_match(word, letters):
    ███████
    ██████████████
        █████████████████████
            ████████
            ███████████████████████
                ███████████
    ████████████


def words_with_letters(words, letters):
    ██████████████████████████████████████████████████████████████


def possible_words(words, pattern):
    ███████████
    ██████████████████
        █████████████████████████████
            █████████████████████████████████████
                ██████████████████████████████████████████████████████████████
                    █████
            ███████# Executed if the previous loop didn't break
                ███████████████████
    █████████████


def reverse_vowels(text):
    ███████████████████████████████████████████████████████████
    ██████████████
        █████████████████████
            █████████████████
            ████████████████████████████████████████████████████
        █████
            ███████████
    █████████████


def colour_trio(items):
    ████████████████████████████████████████
            ████████████████████████████████
            ████████████████████████████████
    ████████
    ████████████████████████████
        ███████████████
    █████████
    ██████████████████████████
    ████████████████████████
        ██████████████████████████████████████████████████████████████████
    █████████████████████████████████████


def prominences(height):
    █████████████████
    ████████████████████████████████
        ████████████████████████████████████
        ███████████████████████████████████████████████████
        ████████████████████████████████████████
            ███████████████
        █████████████
    ███████████
    ███████████████████████████████
        ██████████████████
            ████████████████████████
        █████
            ████████████████
            ██████████████████████████████████████████
            ██████████████
                █████████████████████████████████████
                ████████████
                    █████
                ███████████████████████████
                ██████
            █████████
            ██████████████████████
                █████████████████████████████████████████████
                ████████████
                    █████
                █████████████████████████████
                ██████
            ██████████████████████████████████████
            ████████████
                ██████████████████████████████
    █████████████


def reach_corner(x, y, n, m, aliens):
    ███████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████████████
    █████████████████████
        ██████████████████████
        █████████████████
        ███████████
            ██████████████████████████████████████████████████
                █████
            █████████████████████████████████████████████████████████
                ███████████
            ███████████
                ██████
            █████████████████
                ███████
            ███████████
                ██████
            █████████████████
                ███████
            ██████████████████████████
            ██████████
            █████████████████████████
    ████████████


def eliminate_neighbours(items):
    ██████████████
    ████████████████████
    █████████████████████
    ███████████████████████████████
        ██████████████████████████████████████
        ███████████████████████████████████████████
    ███████████████████████████████████████

    ██████████████████
        ███████████
            ███████████████████████████
            ██████████████████████████
            █████████████

    ████████████
    █████████████████████████
        ████████████████
            █████████████
            ██████████████████████████████████████████████████████
            ████████████
            ████████████████
                ███████████████


def permutation_cycles(perm):
    █████████████████████████
    ██████████████████████████
        ███████████
        ██████████
            ███████████████████████
            █████████████
                █████████████████
                ██████████████
                ███████████
            ██████████████
            ███████████████████
            █████████████████████████████████
            ██████████████
                ████████████
    ███████████████████████████████████


def brangelina(first, second):
    ██████████████████████
    ███████████████████████████████
        ████████████████████████████████████████
            ████████████████
        ████████
    ████████████████████████████████
        ████████████████
            █████████████████████████████████████████████████████████████████


# Return the list of possible wordomino moves in the given state.
def __wordomino_moves(state, words):
    ██████████████████████████████
    # Find the first word that starts with the given three-letter prefix.
    ██████████████████████████████
    # Advance from there over all the words that start with that prefix.
    █████████████████████████████████████████████████████
        ███████████████
        # If this word works, its last letter is a legal move from the state.
        █████████████████████████
            ██████████████████████
        ██████
    ████████████


def wordomino(state, words, really_need_lowest=True):
    ███████████████████████████████████████
    # Check if this state is a single move insta-win into a dead end.
    ██████████████████████████
        ███████████████
            # If list of moves from successor (state+c) is empty, move there to win.
            ███████████████████████████████████████████
                ████████
    # If not insta-win, or if we need the lowest winning move, find the lowest winner.
    ███████████████
        ██████████████████████████████████████████
            ████████
    # No winning moves exist from this state; this state is a cold loser.
    ███████████


def squares_intersect(s1, s2):
    █████████████████
    █████████████████
    █████████████████████████████████████████████████████████████████████████


def __bulgarian_step(piles):
    █████████████████████████████████████████████████████████████


def bulgarian_solitaire(piles, k):
    ███████████████████████████████████████████
    ████████████
    ████████████████████
        ███████████████
        ███████████████████████████████
    █████████████████


def bulgarian_cycle(piles):
    ███████████████████████
    ███████████
        # Tortoise moves one step per round.
        █████████████████████████████████████
        # The hare moves two steps per round.
        ███████████████████████████████████████████████
        ███████████████████████████████████████████████████
            █████
    ██████████
    ███████████
        # Tortoise will crawl the loop while hare marks the spot.
        █████████████████████████████████████
        ███████████
        ███████████████████████████████████████████████████
            █████████████


def count_overlapping_disks(disks):
    # Enter events for the same x-coordinate must be handled before
    # exit events, therefore 0 means enter, 1 means exit
    ███████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████
    █████████████
    ████████████████████████████████
    ███████████████████████████████████
        █████████████
            ███████████████████████████
                ██████████████████████████████████████████████████
                    ██████████████████
            █████████████████████
        █████
            ████████████████████████
    ████████████████████


def spread_the_coins(coins, left, right):
    ██████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████

    ████████████████████
        ████████████████████████
        ██████████████████
        ████████████████
        ██████████████████████████████████
            █████████████████████

    ████████████████████████
        ████████████████████
        ███████████████
        ███████████████████████
        ████████████
        ████████████████████████████████
        █████████████████████████████
        █████████████████████████
        ██████████████████████████
    ████████████████████████████
    ████████████████████████████
    ████████████████████████████████████████████████████
    ████████████████████████
        █████████████████████████
        ██████████
    ███████████████████████


def collatzy_distance(start, end):
    █████████
    ██████████████
    ████████████████
    ██████████████████████
        ██████████
        █████████
        ██████████████
            █████████████████████████████████████████████████
                ████████
                █████████████████
                    ██████████████
                    ███████████
        ███████████
    ████████████


def crag_score(dice):
    ███████████
    ███████████████████
        █████████████████████████████████████████████████████████████
    ██████████████████████
        █████████
    ████████████████████████████████████████████████████████
        █████████
    █████████████████████████████████████████████████


def __crag_value(dice, category):
    █████████████
    ███████████████████# Crag
        ██████████████████████████████████████████████████████████
            █████████
        █████
            ████████
    █████████████████████# Thirteen
        ███████████████████████████
    █████████████████████# Three of a kind
        ██████████████████████████████████████
    █████████████████████# Low straight
        █████████████████████████████████████
    █████████████████████# High straight
        █████████████████████████████████████
    █████████████████████# Odd straight
        █████████████████████████████████████
    █████████████████████# Even straight
        █████████████████████████████████████
    ███████# Pip values
        █████████████████████# pip value to add up
        ███████████████████████████████████████


def __crag_score_rec(rolls, limit, cats, i, to_beat):
    ██████████████████████████████████████████
        ████████
    ████████████████████████████████████████████████████████████████████
    ███████████████████████
    ████████████████████████
        ████████████████
        ████████████████████████████████████████████████████████████████
        ██████████████████████
        █████████████
        ████████████████████
            █████
    ███████████


def optimal_crag_score(rolls):
    ████████████████████████████████████████
    ███████████████████████████████████████████████████████████
    ████████████████████████████████████████████
    ███████████████████████████████████████
        ████████████████████████
    █████████████████████████████████████████████████████████████
    █████████████


def substitution_words(pattern, words):
    ████████████████████████████
    ██████████████████
        ██████████████████
            ███████████████████████████
            ███████████████████████████████████
                ██████████████
                    ██████████████████
                        █████
                █████
                    ███████████████
                        █████
                    █████
                        █████████████
                        █████████████
            ███████# Executed if there was no break in previous loop
                ███████████████████
    █████████████


def __prime_code(word):
    █████
    ██████████████
        ████████████████████████████████
    ████████


def unscramble(words, word):
    ██████████████████████████████████████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████████████████
    ███████████████████████████
        ████████████
        ██████████████████████████████████████████████████████████████████
            ████████████████
    █████████████


def words_with_given_shape(words, shape):
    ███████████
    ██████████████████
        ███████████████████████████████
            ██████████████████████████████
                ████████████████████████████████████
                ██████████████████████████████████████████████████████████████████████████████████████████████████
                    █████
            █████
                ███████████████████
    █████████████


def autocorrect_word(word, words, df):
    ████████████████████████
    ███████████████
        ███████████████████████
            ██████████████████████████████████████████████████
            ██████████
                ███████████████
    ███████████


def remove_after_kth(items, k=1):
    █████████████████████████
    ███████████████
        ██████████████████████
        ██████████
            ████████████████
        ███████████
    █████████████


def ztalloc(pattern):
    ████████
    ███████████████████████████
        ████████████
            ███████████████
        █████
            ███████████████████████
                ███████████
            █████
                ██████████████████████
                █████████████████
                    ███████████
    ███████████


def duplicate_digit_bonus(n):
    ███████████████████████████████████████
    █████████████
        ███████████████████████████
        ████████████████████████████
        █████████████
            ██████████
        █████
            ███████████████████████████
                ███████████████████████████████████████████████████
                ████████████
            ██████████
            ██████████████████
    ████████████


def ryerson_letter_grade(n):
    ██████████
        ██████████
    ████████████
        ███████████
    ████████████
        ██████████
    ████████████
        ███████████
    ██████████████
    █████████████
    ████████████
        ████████████
    ██████████████
        ████████████
    █████
        ███████████
    ███████████████████████████████


def manhattan_skyline(towers):
    # Collect events into a list; 0 means enter, 1 means exit. We need
    # to store the building number i to distinguish between overlapping
    # active buildings with the same height.
    ███████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████
    ███████████████# Sort the events in ascending x-order, entries first.
    ████████████████# Count of total area.
    ████████████# The x-coordinate of the previous event.
    ████████████████# The active buildings currently in the sweep view.
    █████████████# The height of the tallest active building.
    ██████████████████████████████
        # Add the area from the slab between these events. If either
        # slab width or the tallest building height is zero, this
        # product is also zero and the total area does not change.
        ████████████████████████████████████
        # Update the active set depending on what happens.
        ███████████████# Building i enters the active view.
            ██████████████████
            ███████████████████████████# May need to update tallest.
        ███████# Building i exits the active view.
            █████████████████████
            ██████████████████# Compute new tallest from scratch.
                ███████████████████████████████████████████████████████████████████
        ██████████
    █████████████████


def is_ascending(items):
    ███████████
    ███████████████
        ██████████████████████████████████
            ████████████
        ████████
    ███████████


def count_dominators(items):
    ███████████████
    ███████████████
        # Pop out the previous dominators that don't dominate this one.
        ██████████████████████████████████████████████████
            ████████████████
        ████████████████████
    ██████████████████████


def arithmetic_progression(elems):
    ██████████████████████████████████████████████████████████████████████
    ██████████████████████████████
        ████████████████████████████████████████
            █████
        █████████████████████████
            █████████████
            ██████████████
            ██████████████████████████
                █████
                ██████████████████
                    ████████████████████
                    ██████
                    ██████████
                ███████████████████████████████
                    ████████████████████
    ███████████


def __is_word(words, word):
    ██████████████████████████████
    ███████████████████████████████████████████████████


def word_height(words, word):
    ██████████████████████████████
        ████████
    ██████████████████████
    █████████████████████
        ████████████████████████████████
        ██████████████████████████████████████
        ███████████████████
            ████████████████████████████████████████
            ████████████████████
                ████████████████████████████████████████████████████
    ███████████


def max_checkers_capture(n, x, y, pieces):
    ████████
    █████████████████████████████████████████████████████████
        ███████████████████████████████████████████████
            █████████████████████████████████████████████████████████████████████████
                ███████████████████████████████
                █████████████████████████████████████████████████████████████████
                █████████████████████████████
                ████████████████████████████
    ███████████


def count_growlers(animals):
    █████████
    ██████████████████████████████████████████████████████████
        ███████████
        ████████████████████████████
            ██████████████████████████████████████████████
                ██████████
            ████████████████████████████████████████████████
    ████████████


def count_maximal_layers(points):
    ██████████████████████████████████████
    ██████████
    ██████████████████████
        ███████████
        █████████
        ██████████████████████████████
            █████████████████████████████████
                █████████████████████████████
                    ██████████████
                    █████
        █████████████
    █████████████


def line_with_most_points(points):
    █████████████████████
    ███████████████████████████████
        ███████████████████████████████████
            ██████████████████████
                ██████████████
                ███████████████
                ███████████████████████████████████
                    ██████████████
                    ██████████████████████████████
                        ████████████████
                        ████████████████
                        ████████████████
                █████████████████████████████
    ███████████


def midnight(dice):
    ████████

    ██████████████████████████████████████████████████████████████████
        █████████████

        ████████████████████████████████████████████████████████████████
            ████████
        ████████████████████
            ██████████████████████████████████████████
            ██████████████████████████████████████████████
                ███████████
                    ██████████████████████
                    █████████████
                        ██████████████
                    █████████████
                        ███████████████
                    █████████████
            ██████████████████████████████████████████████████████████
        █████
            ███████████████████████████████
            █████████████████████████████████████████████
            ███████████████████████████████████
                █████████████████████████████████████
                    ██████████████████████████████████████████████████
                    ████████████████████████
                    ███████████████
                        ████████████████████████████
                    ████████████████████████████████
                    ██████████████████████████████████████████████████████████████
                    ████████████████████████
            ███████████

    █████████████████████████████████████████
    ███████████


def tukeys_ninthers(items):
    █████████████████████
        ████████████████████████████████████████████████████████████████████
    ███████████████


def is_perfect_power(n):
    █████
    ██████████████████
        ████████████████
        ████████████
            ████████████████
            ██████████████
                █████████
            █████
                █████
        ███████████████
            ███████████
        ██████
    ████████████


def rooks_with_friends(n, friends, enemies):
    ████████████████████████████████████████████████
    █████████████████████████████████████████
    ████████████████████████
        █████████████████████
            ██████████████████████████████████████████
            ██████████████████████████████████████
                   █████████████████████████████████████████████████████
                ████████████████
                █████████████████████████
    █████████████████████████████████████████████████████


def safe_squares_rooks(n, rooks):
    ███████████████████████████████
    ███████████████████████████████
    ████████████████████████
        ███████████████████████████████
    ██████████████████████████████████


def safe_squares_bishops(n, bishops):
    ██████████████
    ████████████████████
        ████████████████████
            █████████████████████████████
                ████████████████████████
                    ██████████████████████████████████
                        █████
                █████
                    ███████████████
    █████████████████


def balanced_ternary(n, pp=None, sp=None):
    ██████████████
        █████████████████████████████
    █████████
        █████████████████████████████████████████████████
    ██████████
        █████████████
        ██████████████████
            ████████
            ███████████
    █████
        █████████████
            ████████████
            ████████████
    ████████████████
        █████████████████████████████████████████████████████████████
    █████
        ██████████████████████████████████████████████████████


def __two_summers(items, goal, i=None, j=None):
    # Initialize the approaching indices, unless given.
    █████████████
        █████
    █████████████
        ██████████████████
    # Each round, one index takes one step towards the other.
    ████████████
        ███████████████████████
        █████████████
            ███████████
        ██████████████
            ██████
        █████
            ██████
    ████████████


# With __two_summers, finding three summers is now just one loop.

def three_summers(items, goal):
    ███████████████████████████████
        ████████████████████████████████████████████████
            ███████████
    ████████████


def count_divisibles_in_range(start, end, n):
    ██████████████████████████
        █████████████████████████████████████████████████
    ███████████████
        █████████████████████████████████████████████████████████████████████████████████████
    █████
        █████████████████
            ████████████████████████
        ██████████████
        ███████████████████████████████████████████████████


def lattice_paths(x, y, tabu):
    ██████████████████
        ████████
    ██████████████████████████████████████████████████████████████
    ████████████████████
    ███████████████████████
        ███████████████████████
            ███████████████████████████████████████████████
                ███████████████████████████████████████████████
                ███████████████████████████████████████████████
                ████████████████████████████████
    ███████████████████████


def winning_card(cards, trump=None):
    █████████████████
    ███████████████████████
        █████████████████
        ███████████████████████████████████████████
            █████████████
        ██████████████████████████████████████████████████████████████████████████████████
            █████████████
    █████████████


def oware_move(board, pos):
    ██████████████████████████████████████
    ████████████████
    ██████████████
    ██████████████
        ███████████████████
        ███████████████
            ███████████████
            ████████
    █████████████████████████████████████████████
        ██████████████████████
        ██████████████
        ███████████████████
    ████████████


def __lunar_add(a, b):
    ██████████
        ████████
    ████████████
        ████████
    █████
        ███████████████████████████████████████████████████████████████


def __sd_mul(a, b):
    ██████████████████████████████████████████████████████████████████


def lunar_multiply(a, b):
    █████████████████████████████████████████████████████████████████████████████████████████


def __cookie(piles, dl, bl):
    ██████████
        ███████████
    ██████████████
    ██████████
        █████████████████
    ███████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
        █████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████
        ██████████████████████████████████████
        ████████████████████
            █████████████████
    ███████████


def cookie(piles):
    ██████████████████████████████████████████████████████████
    ██████████████████████████████████
        ██████████
        █████████████████████████████████████
            █████████████████████
            ████████████████████████████████
            ██████████
                ████████████████████████
                █████
    ████████████████


def scylla_or_charybdis(seq, n):
    ███████████████████████████████
    █████████████████████████
        ██████████████████████
        █████████████████████
            ███████████████
            ████████████████████████████
            █████████████████
                █████████████████████████████████████
                    ████████████████████████████
                █████
        ██████
    █████████████


def counting_series(n):
    ████████████████████████████
    █████████████
        ██████████
        ██████
        ██████████
        ███████
    ███████████
    ████████████████████████████████████████████


def taxi_zum_zum(moves):
    ████████████████████████████████████████████████████████████████
    ███████████████
        ████████████
            ███████████████████████████
        ██████████████
            ███████████████████████████
        █████
            ████████████████████████████████████████████████████████
    ██████████


def is_left_handed(pips):
    # How many sides need to be mirrored to get to 123?
    ██████████████████████████████████████████
    # Mirror the sides that are not 123.
    ████████████████████████████████████████████
    # Is the resulting die clockwise?
    ████████████████████████████████████████████████
    # Flip the result if needed.
    █████████████████████████████████████


def group_and_skip(n, a, b=1):
    ███████████
    ████████████
        ██████████
        ████████████████████
        █████████
    █████████████


def trips_fill(words, pat, tabu):
    ████████████████
        ██████████
    █████████████████
        ██████████████████████████
    ███████████████████
        ███████████
        █████████████████████████████████████████████████████████████████████████
    █████
        ███████████████████████████████████
        ███████████████
        ██████████████████████████████████████████████████████████
            ████████
    ██████████████████████
        ███████████████████████████
            ████████████
            █████████████████
                ████████████████████████████████████
                ████████████████████████████████████
                ████████████████████████████████████
                ████████████████████
                    ██████████████
                    ████████████████████████████████████████████████
                    ██████████
                    ████████
                        ██████████████████


def mcculloch(digits):
    ███████████████████
        ██████████████████████████████████
        ███████████████
            ███████████
        █████████████████
            ███████████████████████
            █████████
                ███████████████
                    █████████████████████████
                █████████████████
                    ██████████████████
                █████████████████
                    ████████████████████████


def __canonize(ranks_):
    ████████████████████████████████████████████████████████████████████████████


def bridge_hand_shorthand(hand):
    ███████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████████████████████


def losing_trick_count(hand):
    █████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████


def knight_jump(steps, start, end):
    ███████████████████████████████████████████████████████████████████████████████████████


def sum_of_distinct_cubes(n):
    ████████████████████
        ███████████
            █████████
        ████████████████████
            ███████████
        █████████████
            ███████████████████████████████████
            ███████████████████
                ██████████████
                ██████████
            ███████
        ███████████

    ████████████████████████████████████
    ███████████████████████████████████████████████████


def wythoff_array(n):
    █████████████# First two elements of the previous row.
    ███████████████████# The smallest positive integer not yet seen.
    ██████████████# Integers > lowest_unseen that we have already seen.
    ████████████████████# Row number that is being generated.
        ████████████# First two elements of the first row.
            █████████████
        ███████# First two elements of the next row.
            ██████████████████
            ██████████████████████████████████████████████
        # Initialize the state variables for the current row.
        ██████████████████████████████████
        # Generate elements in the current row up to n.
        ██████████████
            █████████████# Found what we are looking for
                ███████████
            # Update the set of integers that we have seen.
            ████████████
            # Release the elements less than the smallest unseen.
            ████████████████████████████
                ██████████████████████████
                ██████████████████
            # Move one step to the right in the current row.
            ██████████████████████████████


def pyramid_blocks(n, m, h):
    ███████████████████████████████████████████████████████████████████████████████████████████


def count_and_say(digits):
    ██████████████████████████████████████
    ██████████████████████████████
        █████████████
            ████████████████
        █████
            ███████████████
                ██████████████████████████
                ██████████████
            ████████
            ███████████████
    █████████████


def is_cyclops(n):
    ███████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████


def milton_work_point_count(hand, trump='notrump'):
    ███████████████████████████████████████████████████████████████
    █████████████████████████
        ████████████████████████████
    ███████████████████████████████
    ███████████████████████████████████████
        ██████████
    ██████████████████████████████████████████████████████████████
    ██████████████████████
        ███████████████████████████████████████
            █████████████████████████████
                ██████████████████
    ███████████████
        ██████████
            ██████████
        ████████████
            ██████████
        ████████████
            ██████████
    ████████████


def __dominated(p1, p2):
    ██████████████████████████████████████


def __cross(x1, y1, x2, y2, x3, y3):
    ████████████████████████████████████████████████████


def __collinear(x1, y1, x2, y2, x3, y3):
    ███████████████████████████████████████████


def sum_of_two_squares(n):
    ███████████
    ████████████████
        ██████
    █████████████
        █████████████████
        ██████████
            ███████████
        ███████████
            ██████
        █████
            ██████
    ███████████


def count_squares(points):
    █████████████████████████████
    ██████████████████████████████████
    ██████████████████████████████████
    █████████████████████
        █████████████████████████████████
            █████████████████████████████████
                ████████████████████████████
                ████████████████████████████
                ██████████████████████████████████████
                ████████████████████
                    ████████████
    ██████████████


def only_odd_digits(n):
    ██████████████████████████████████████████████


def __expand_primes(n):
    # Start looking for new primes after the largest prime we know.
    ████████████████████
    ███████████████████████
        █████████████████
            ██████████████████
        ██████


def __is_prime(n):
    # To check whether n is prime, check its divisibility with
    # all known prime numbers up to the square root of n.
    # First ensure that we have enough primes to do the test.
    ████████████████████████████
        ████████████████████████████████████████

    ██████████████████
        ██████████████
            ████████████
        █████████████
            ███████████
    ███████████


def __f_sum(n, i, factors):
    █████████████████
        ██████████████
            ███████████
    █████████████████████
        ████████████
    ██████████████
    ██████████████
        ███████████
    █████████
        ████████████
    █████
        ███████████████████████████████████████████████████████████████


def balanced_centrifuge(n, k):
    ████████████
    ██████████████████
    ██████████████████
        ██████████████
            █████████████████
        █████████
            █████
    ████████████████████████████████████████████████████████████


def fibonacci_word(k):
    █████████████████████
        ██████████████████████████████████████
    ███████████████████
    ████████████
        ██████████████████████
            █████████████████████
        █████████
    █████████████


def can_balance(items):
    ████████████████████████████████
        ██████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████████████████████████
        ███████████████████████████████
            ████████
    █████████


def postfix_evaluate(items):
    ██████████
    ██████████████████
        █████████████████████
            ████████████████
            ████████████████
            ███████████████
                █████████████████████
            █████████████████
                █████████████████████
            █████████████████
                █████████████████████
            █████████████████
                ████████████████████████████████████████
        █████
            ██████████████████
    ███████████████


def give_change(amount, coins):
    ███████████
    ██████████████████
        ███████████████████████████████████████████
        ███████████████████████████
    █████████████


def nearest_polygonal_number(n, s):
    ██████████████
        ████████████████████████████████████

    ███████████
    ███████████████████
        ████████████████
    ████████████████
        ██████████████
        ████████████
        █████████
            █████
        █████
            █████
    ███████████████████████████
    █████████████████████████████
    █████████████████████████████


def hitting_integer_powers(a, b, t=100):
    ███████████████████████████
    █████████████████████████████████████
        ███████████
            ███████████
            ███████
        █████
            ███████████
            ███████
    █████████████


def __frog1d(x1, d1, x2, d2):
    ███████████
        ███████████████████████████████████
    ████████████████████████
    ███████████████
        ███████████
    ██████████
        █████████████████████████████
    █████████████████████████████████████████████████████


def frog_collision_time(frog1, frog2):
    ██████████████████████████
    ██████████████████████████
    ███████████████████████████████
    ██████████████████
        ███████████████████████████████
        ██████████████████
            ██████████████████████
                ████████████████████
            █████
                █████████████████████████████████
            ████████████████████████████████████████████████


def subtract_square(queries):
    ████████████████████████████████████████
    █████████████████████
        ████████████████
        ████████
    █████████████████████
        ███████████████████
        ████████
    ████████
    █████████████████████████
        █████
        ████████████████████
            ██████████████████████████
                █████████████████
                █████
            ██████
        █████
            ██████████████████
        ████████████████████████
            ███████████████████████
            ████████
        █████████
    █████████████


def calkin_wilf(n):
    █████████████████
    ████████████████████████
    ████████████
        ███████████████
        █████████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ██████
    ███████████████████


def __no_repeated_digits(n):
    ████████████████████████████████████████████████████████████████████████████████████


def __consistent(n, m, bulls, cows):
    ███████████████████████████████████
    ██████████████████████████
        ████████████
            ███████
        █████████████
            ███████
    █████████████████████████████████


def bulls_and_cows(guesses):
    █████████████████████████████████████████████████████████████████████
    ████████████████████████████████████
        ███████████████████████████████████████████████████████████████████████
    ███████████████


def count_consecutive_summers(n):
    █████████████████████████████████████
    █████████████
        █████████████
            █████████████████
        █████████████
            ██████
            █████████
        █████
            █████████
            ██████
            █████████
                █████
    ███████████████████


def domino_cycle(tiles):
    ████████████████████████████████████████████
    ██████████████████
        ██████████████████████
            ████████████
        ███████████
    ███████████


def van_eck(n):
    ██████████████████████
    █████████████████████████
        ████████████████████
            ██████████████████
            ████████
        █████
            █████████████████
            ██████████████████
            ███████████████████
    ███████████
